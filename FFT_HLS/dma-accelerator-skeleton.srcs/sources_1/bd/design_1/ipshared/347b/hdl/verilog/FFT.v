// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="FFT,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=25.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=20.390300,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=44,HLS_SYN_FF=5003,HLS_SYN_LUT=11857,HLS_VERSION=2018_3}" *)

module FFT (
        ap_clk,
        ap_rst_n,
        array_r_TDATA,
        array_r_TVALID,
        array_r_TREADY,
        array_r_TLAST,
        oparray_TDATA,
        oparray_TVALID,
        oparray_TREADY,
        oparray_TLAST,
        s_axi_CONTROL_BUS_AWVALID,
        s_axi_CONTROL_BUS_AWREADY,
        s_axi_CONTROL_BUS_AWADDR,
        s_axi_CONTROL_BUS_WVALID,
        s_axi_CONTROL_BUS_WREADY,
        s_axi_CONTROL_BUS_WDATA,
        s_axi_CONTROL_BUS_WSTRB,
        s_axi_CONTROL_BUS_ARVALID,
        s_axi_CONTROL_BUS_ARREADY,
        s_axi_CONTROL_BUS_ARADDR,
        s_axi_CONTROL_BUS_RVALID,
        s_axi_CONTROL_BUS_RREADY,
        s_axi_CONTROL_BUS_RDATA,
        s_axi_CONTROL_BUS_RRESP,
        s_axi_CONTROL_BUS_BVALID,
        s_axi_CONTROL_BUS_BREADY,
        s_axi_CONTROL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 35'd1;
parameter    ap_ST_fsm_state2 = 35'd2;
parameter    ap_ST_fsm_state3 = 35'd4;
parameter    ap_ST_fsm_state4 = 35'd8;
parameter    ap_ST_fsm_state5 = 35'd16;
parameter    ap_ST_fsm_state6 = 35'd32;
parameter    ap_ST_fsm_state7 = 35'd64;
parameter    ap_ST_fsm_state8 = 35'd128;
parameter    ap_ST_fsm_state9 = 35'd256;
parameter    ap_ST_fsm_state10 = 35'd512;
parameter    ap_ST_fsm_state11 = 35'd1024;
parameter    ap_ST_fsm_state12 = 35'd2048;
parameter    ap_ST_fsm_state13 = 35'd4096;
parameter    ap_ST_fsm_state14 = 35'd8192;
parameter    ap_ST_fsm_state15 = 35'd16384;
parameter    ap_ST_fsm_state16 = 35'd32768;
parameter    ap_ST_fsm_state17 = 35'd65536;
parameter    ap_ST_fsm_state18 = 35'd131072;
parameter    ap_ST_fsm_state19 = 35'd262144;
parameter    ap_ST_fsm_state20 = 35'd524288;
parameter    ap_ST_fsm_state21 = 35'd1048576;
parameter    ap_ST_fsm_state22 = 35'd2097152;
parameter    ap_ST_fsm_state23 = 35'd4194304;
parameter    ap_ST_fsm_state24 = 35'd8388608;
parameter    ap_ST_fsm_state25 = 35'd16777216;
parameter    ap_ST_fsm_state26 = 35'd33554432;
parameter    ap_ST_fsm_state27 = 35'd67108864;
parameter    ap_ST_fsm_state28 = 35'd134217728;
parameter    ap_ST_fsm_state29 = 35'd268435456;
parameter    ap_ST_fsm_state30 = 35'd536870912;
parameter    ap_ST_fsm_state31 = 35'd1073741824;
parameter    ap_ST_fsm_state32 = 35'd2147483648;
parameter    ap_ST_fsm_state33 = 35'd4294967296;
parameter    ap_ST_fsm_state34 = 35'd8589934592;
parameter    ap_ST_fsm_state35 = 35'd17179869184;
parameter    C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [63:0] array_r_TDATA;
input   array_r_TVALID;
output   array_r_TREADY;
input   array_r_TLAST;
output  [63:0] oparray_TDATA;
output   oparray_TVALID;
input   oparray_TREADY;
output   oparray_TLAST;
input   s_axi_CONTROL_BUS_AWVALID;
output   s_axi_CONTROL_BUS_AWREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_AWADDR;
input   s_axi_CONTROL_BUS_WVALID;
output   s_axi_CONTROL_BUS_WREADY;
input  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_WDATA;
input  [C_S_AXI_CONTROL_BUS_WSTRB_WIDTH - 1:0] s_axi_CONTROL_BUS_WSTRB;
input   s_axi_CONTROL_BUS_ARVALID;
output   s_axi_CONTROL_BUS_ARREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_ARADDR;
output   s_axi_CONTROL_BUS_RVALID;
input   s_axi_CONTROL_BUS_RREADY;
output  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_RDATA;
output  [1:0] s_axi_CONTROL_BUS_RRESP;
output   s_axi_CONTROL_BUS_BVALID;
input   s_axi_CONTROL_BUS_BREADY;
output  [1:0] s_axi_CONTROL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [34:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [63:0] array_r_0_data_out;
wire    array_r_0_vld_in;
wire    array_r_0_vld_out;
wire    array_r_0_ack_in;
reg    array_r_0_ack_out;
reg   [63:0] array_r_0_payload_A;
reg   [63:0] array_r_0_payload_B;
reg    array_r_0_sel_rd;
reg    array_r_0_sel_wr;
wire    array_r_0_sel;
wire    array_r_0_load_A;
wire    array_r_0_load_B;
reg   [1:0] array_r_0_state;
wire    array_r_0_state_cmp_full;
reg    array_last_0_data_out;
wire    array_last_0_vld_in;
wire    array_last_0_vld_out;
wire    array_last_0_ack_in;
reg    array_last_0_ack_out;
reg    array_last_0_payload_A;
reg    array_last_0_payload_B;
reg    array_last_0_sel_rd;
reg    array_last_0_sel_wr;
wire    array_last_0_sel;
wire    array_last_0_load_A;
wire    array_last_0_load_B;
reg   [1:0] array_last_0_state;
wire    array_last_0_state_cmp_full;
reg   [63:0] oparray_1_data_out;
reg    oparray_1_vld_in;
wire    oparray_1_vld_out;
wire    oparray_1_ack_in;
wire    oparray_1_ack_out;
reg   [63:0] oparray_1_payload_A;
reg   [63:0] oparray_1_payload_B;
reg    oparray_1_sel_rd;
reg    oparray_1_sel_wr;
wire    oparray_1_sel;
wire    oparray_1_load_A;
wire    oparray_1_load_B;
reg   [1:0] oparray_1_state;
wire    oparray_1_state_cmp_full;
reg    oparray_last_1_data_out;
reg    oparray_last_1_vld_in;
wire    oparray_last_1_vld_out;
wire    oparray_last_1_ack_in;
wire    oparray_last_1_ack_out;
reg    oparray_last_1_payload_A;
reg    oparray_last_1_payload_B;
reg    oparray_last_1_sel_rd;
reg    oparray_last_1_sel_wr;
wire    oparray_last_1_sel;
wire    oparray_last_1_load_A;
wire    oparray_last_1_load_B;
reg   [1:0] oparray_last_1_state;
wire    oparray_last_1_state_cmp_full;
wire   [31:0] control;
reg    array_r_TDATA_blk_n;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_7_fu_624_p2;
wire    ap_CS_fsm_state34;
reg    oparray_TDATA_blk_n;
wire    ap_CS_fsm_state35;
wire   [31:0] grp_fu_477_p2;
reg   [31:0] reg_514;
wire    ap_CS_fsm_state20;
wire   [0:0] icmp_fu_788_p2;
wire    ap_CS_fsm_state21;
wire   [31:0] grp_fu_482_p2;
reg   [31:0] reg_519;
wire   [31:0] grp_fu_487_p2;
reg   [31:0] reg_524;
wire   [31:0] grp_fu_492_p2;
reg   [31:0] reg_529;
wire   [31:0] grp_fu_461_p2;
reg   [31:0] reg_534;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state27;
wire   [31:0] grp_fu_465_p2;
reg   [31:0] reg_541;
wire   [0:0] tmp_s_fu_548_p2;
reg   [0:0] tmp_s_reg_856;
wire   [29:0] a_cast5_cast_fu_554_p1;
wire    ap_CS_fsm_state2;
wire   [10:0] i_fu_564_p2;
reg   [10:0] i_reg_868;
wire   [3:0] j_1_fu_576_p2;
wire    ap_CS_fsm_state3;
wire  signed [29:0] tmp_6_fu_602_p1;
wire   [0:0] exitcond5_fu_570_p2;
wire   [3:0] tmp_32_fu_620_p1;
reg   [3:0] tmp_32_reg_886;
reg    ap_block_state4;
wire   [31:0] val_1_fu_683_p2;
wire    ap_CS_fsm_state5;
wire   [31:0] base_1_fu_689_p2;
wire   [10:0] p_1_fu_701_p2;
reg   [10:0] p_1_reg_912;
wire    ap_CS_fsm_state6;
wire   [63:0] tmp_4_fu_707_p1;
reg   [63:0] tmp_4_reg_917;
wire   [0:0] exitcond2_fu_695_p2;
wire   [10:0] m_fu_723_p2;
reg   [10:0] m_reg_936;
wire    ap_CS_fsm_state8;
wire   [0:0] exitcond4_fu_717_p2;
wire   [9:0] tmp_33_fu_729_p4;
reg   [9:0] tmp_33_reg_941;
wire   [31:0] grp_fu_511_p1;
reg   [31:0] tmp_10_reg_952;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_501_p2;
reg   [31:0] x_assign_reg_958;
wire    ap_CS_fsm_state16;
wire   [31:0] grp_fu_506_p2;
reg   [31:0] x_assign_1_reg_963;
wire   [31:0] m_cast_fu_744_p1;
reg   [31:0] m_cast_reg_968;
wire    ap_CS_fsm_state18;
wire    grp_sin_or_cos_float_s_fu_431_ap_ready;
wire    grp_sin_or_cos_float_s_fu_431_ap_done;
wire    grp_sin_or_cos_float_s_fu_446_ap_ready;
wire    grp_sin_or_cos_float_s_fu_446_ap_done;
reg    ap_block_state18_on_subcall_done;
wire   [30:0] tmp_8_fu_747_p1;
reg   [30:0] tmp_8_reg_973;
wire   [31:0] m2_fu_750_p1;
reg   [31:0] m2_reg_978;
wire   [31:0] grp_sin_or_cos_float_s_fu_431_ap_return;
reg   [31:0] wm_real_reg_983;
wire   [31:0] grp_sin_or_cos_float_s_fu_446_ap_return;
reg   [31:0] wm_imag_reg_989;
wire   [31:0] k_1_cast2_fu_753_p1;
wire    ap_CS_fsm_state19;
wire   [29:0] j_2_fu_766_p2;
reg   [29:0] j_2_reg_1003;
wire   [3:0] s_1_fu_772_p2;
wire   [0:0] tmp_15_fu_761_p2;
reg   [9:0] tmp_real_addr_2_reg_1016;
reg   [9:0] tmp_imag_addr_2_reg_1021;
reg   [9:0] tmp_real_addr_3_reg_1026;
reg   [9:0] tmp_imag_addr_3_reg_1031;
wire   [31:0] k_2_fu_811_p2;
reg   [31:0] k_2_reg_1036;
wire   [31:0] tmp_real_q0;
reg   [31:0] u_real_reg_1041;
wire   [31:0] tmp_imag_q0;
reg   [31:0] u_imag_reg_1047;
wire   [31:0] grp_fu_469_p2;
reg   [31:0] c_real_1_reg_1053;
wire   [31:0] grp_fu_473_p2;
reg   [31:0] c_imag_1_reg_1058;
wire    ap_CS_fsm_state32;
wire   [10:0] h_1_fu_822_p2;
reg   [10:0] h_1_reg_1076;
wire    ap_CS_fsm_state33;
reg    ap_block_state33;
wire   [0:0] exitcond_fu_816_p2;
wire   [63:0] oparray_imag_addr_fu_842_p3;
reg   [9:0] tmparr_real_address0;
reg    tmparr_real_ce0;
reg    tmparr_real_we0;
wire   [31:0] tmparr_real_d0;
wire   [31:0] tmparr_real_q0;
reg   [9:0] tmparr_imag_address0;
reg    tmparr_imag_ce0;
reg    tmparr_imag_we0;
wire   [31:0] tmparr_imag_d0;
wire   [31:0] tmparr_imag_q0;
reg   [9:0] tmp_real_address0;
reg    tmp_real_ce0;
reg    tmp_real_we0;
reg   [31:0] tmp_real_d0;
reg   [9:0] tmp_imag_address0;
reg    tmp_imag_ce0;
reg    tmp_imag_we0;
reg   [31:0] tmp_imag_d0;
reg   [3:0] bin_address0;
reg    bin_ce0;
reg    bin_we0;
wire   [0:0] bin_d0;
wire   [0:0] bin_q0;
wire    grp_sin_or_cos_float_s_fu_431_ap_start;
wire    grp_sin_or_cos_float_s_fu_431_ap_idle;
wire    grp_sin_or_cos_float_s_fu_431_do_cos;
wire    grp_sin_or_cos_float_s_fu_446_ap_start;
wire    grp_sin_or_cos_float_s_fu_446_ap_idle;
wire    grp_sin_or_cos_float_s_fu_446_do_cos;
reg   [10:0] a_reg_287;
reg   [3:0] j_reg_298;
wire   [0:0] exitcond3_fu_558_p2;
reg   [29:0] a1_reg_309;
reg   [3:0] k_0_in_reg_318;
reg   [31:0] base_reg_329;
reg  signed [31:0] val_reg_341;
reg   [10:0] p_reg_353;
wire    ap_CS_fsm_state7;
reg   [3:0] s_reg_364;
reg   [31:0] p_s_reg_376;
reg   [31:0] p_1_93_reg_388;
reg   [29:0] k_1_reg_400;
reg  signed [31:0] k2_reg_411;
wire    ap_CS_fsm_state29;
reg   [10:0] h_reg_420;
reg    grp_sin_or_cos_float_s_fu_431_ap_start_reg;
wire    ap_CS_fsm_state17;
reg    grp_sin_or_cos_float_s_fu_446_ap_start_reg;
wire   [63:0] tmp_5_fu_582_p1;
wire   [63:0] tmp_12_fu_630_p1;
wire  signed [63:0] tmp_11_fu_648_p1;
wire  signed [63:0] tmp_18_fu_799_p1;
wire  signed [63:0] tmp_19_fu_805_p1;
wire   [63:0] tmp_16_fu_828_p1;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state28;
reg   [31:0] grp_fu_461_p0;
reg   [31:0] grp_fu_461_p1;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state30;
reg   [31:0] grp_fu_465_p0;
reg   [31:0] grp_fu_465_p1;
reg   [31:0] grp_fu_477_p1;
reg   [31:0] grp_fu_482_p1;
reg   [31:0] grp_fu_487_p1;
reg   [31:0] grp_fu_492_p0;
wire    ap_CS_fsm_state10;
wire   [31:0] grp_fu_511_p0;
wire   [28:0] tmp_31_fu_592_p4;
wire   [4:0] k_0_in_cast_fu_606_p1;
wire  signed [4:0] k_fu_610_p2;
wire  signed [31:0] k_cast8_fu_616_p1;
wire   [31:0] tmp_34_fu_639_p1;
wire   [31:0] array_imag_load_new9_fu_654_p4;
wire   [31:0] tmp_13_fu_669_p3;
wire   [31:0] tmp_14_fu_677_p2;
wire   [10:0] s_cast_fu_713_p1;
wire   [30:0] k_1_cast_fu_757_p1;
wire   [21:0] tmp_36_fu_778_p4;
wire   [31:0] tmp_17_fu_794_p2;
wire   [31:0] tmp_imag_load_toint_fu_838_p1;
wire   [31:0] tmp_real_load_toint_fu_834_p1;
reg   [1:0] grp_fu_461_opcode;
reg   [34:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 35'd1;
#0 array_r_0_sel_rd = 1'b0;
#0 array_r_0_sel_wr = 1'b0;
#0 array_r_0_state = 2'd0;
#0 array_last_0_sel_rd = 1'b0;
#0 array_last_0_sel_wr = 1'b0;
#0 array_last_0_state = 2'd0;
#0 oparray_1_sel_rd = 1'b0;
#0 oparray_1_sel_wr = 1'b0;
#0 oparray_1_state = 2'd0;
#0 oparray_last_1_sel_rd = 1'b0;
#0 oparray_last_1_sel_wr = 1'b0;
#0 oparray_last_1_state = 2'd0;
#0 grp_sin_or_cos_float_s_fu_431_ap_start_reg = 1'b0;
#0 grp_sin_or_cos_float_s_fu_446_ap_start_reg = 1'b0;
end

FFT_CONTROL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_BUS_DATA_WIDTH ))
FFT_CONTROL_BUS_s_axi_U(
    .AWVALID(s_axi_CONTROL_BUS_AWVALID),
    .AWREADY(s_axi_CONTROL_BUS_AWREADY),
    .AWADDR(s_axi_CONTROL_BUS_AWADDR),
    .WVALID(s_axi_CONTROL_BUS_WVALID),
    .WREADY(s_axi_CONTROL_BUS_WREADY),
    .WDATA(s_axi_CONTROL_BUS_WDATA),
    .WSTRB(s_axi_CONTROL_BUS_WSTRB),
    .ARVALID(s_axi_CONTROL_BUS_ARVALID),
    .ARREADY(s_axi_CONTROL_BUS_ARREADY),
    .ARADDR(s_axi_CONTROL_BUS_ARADDR),
    .RVALID(s_axi_CONTROL_BUS_RVALID),
    .RREADY(s_axi_CONTROL_BUS_RREADY),
    .RDATA(s_axi_CONTROL_BUS_RDATA),
    .RRESP(s_axi_CONTROL_BUS_RRESP),
    .BVALID(s_axi_CONTROL_BUS_BVALID),
    .BREADY(s_axi_CONTROL_BUS_BREADY),
    .BRESP(s_axi_CONTROL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .control(control)
);

FFT_tmparr_real #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
tmparr_real_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(tmparr_real_address0),
    .ce0(tmparr_real_ce0),
    .we0(tmparr_real_we0),
    .d0(tmparr_real_d0),
    .q0(tmparr_real_q0)
);

FFT_tmparr_real #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
tmparr_imag_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(tmparr_imag_address0),
    .ce0(tmparr_imag_ce0),
    .we0(tmparr_imag_we0),
    .d0(tmparr_imag_d0),
    .q0(tmparr_imag_q0)
);

FFT_tmparr_real #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
tmp_real_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(tmp_real_address0),
    .ce0(tmp_real_ce0),
    .we0(tmp_real_we0),
    .d0(tmp_real_d0),
    .q0(tmp_real_q0)
);

FFT_tmparr_real #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
tmp_imag_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(tmp_imag_address0),
    .ce0(tmp_imag_ce0),
    .we0(tmp_imag_we0),
    .d0(tmp_imag_d0),
    .q0(tmp_imag_q0)
);

FFT_bin #(
    .DataWidth( 1 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
bin_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(bin_address0),
    .ce0(bin_ce0),
    .we0(bin_we0),
    .d0(bin_d0),
    .q0(bin_q0)
);

sin_or_cos_float_s grp_sin_or_cos_float_s_fu_431(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sin_or_cos_float_s_fu_431_ap_start),
    .ap_done(grp_sin_or_cos_float_s_fu_431_ap_done),
    .ap_idle(grp_sin_or_cos_float_s_fu_431_ap_idle),
    .ap_ready(grp_sin_or_cos_float_s_fu_431_ap_ready),
    .t_in(x_assign_reg_958),
    .do_cos(grp_sin_or_cos_float_s_fu_431_do_cos),
    .ap_return(grp_sin_or_cos_float_s_fu_431_ap_return)
);

sin_or_cos_float_s grp_sin_or_cos_float_s_fu_446(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sin_or_cos_float_s_fu_446_ap_start),
    .ap_done(grp_sin_or_cos_float_s_fu_446_ap_done),
    .ap_idle(grp_sin_or_cos_float_s_fu_446_ap_idle),
    .ap_ready(grp_sin_or_cos_float_s_fu_446_ap_ready),
    .t_in(x_assign_1_reg_963),
    .do_cos(grp_sin_or_cos_float_s_fu_446_do_cos),
    .ap_return(grp_sin_or_cos_float_s_fu_446_ap_return)
);

FFT_faddfsub_32nshbi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_faddfsub_32nshbi_U19(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_461_p0),
    .din1(grp_fu_461_p1),
    .opcode(grp_fu_461_opcode),
    .ce(1'b1),
    .dout(grp_fu_461_p2)
);

FFT_fadd_32ns_32nibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fadd_32ns_32nibs_U20(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_465_p0),
    .din1(grp_fu_465_p1),
    .ce(1'b1),
    .dout(grp_fu_465_p2)
);

FFT_fsub_32ns_32njbC #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fsub_32ns_32njbC_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(u_real_reg_1041),
    .din1(reg_534),
    .ce(1'b1),
    .dout(grp_fu_469_p2)
);

FFT_fsub_32ns_32njbC #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fsub_32ns_32njbC_U22(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(u_imag_reg_1047),
    .din1(reg_541),
    .ce(1'b1),
    .dout(grp_fu_473_p2)
);

FFT_fmul_32ns_32nkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fmul_32ns_32nkbM_U23(
    .din0(p_1_93_reg_388),
    .din1(grp_fu_477_p1),
    .dout(grp_fu_477_p2)
);

FFT_fmul_32ns_32nkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fmul_32ns_32nkbM_U24(
    .din0(p_s_reg_376),
    .din1(grp_fu_482_p1),
    .dout(grp_fu_482_p2)
);

FFT_fmul_32ns_32nkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fmul_32ns_32nkbM_U25(
    .din0(p_1_93_reg_388),
    .din1(grp_fu_487_p1),
    .dout(grp_fu_487_p2)
);

FFT_fmul_32ns_32nkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fmul_32ns_32nkbM_U26(
    .din0(grp_fu_492_p0),
    .din1(p_s_reg_376),
    .dout(grp_fu_492_p2)
);

FFT_fdiv_32ns_32nlbW #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fdiv_32ns_32nlbW_U27(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd1078530011),
    .din1(tmp_10_reg_952),
    .ce(1'b1),
    .dout(grp_fu_501_p2)
);

FFT_fdiv_32ns_32nlbW #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fdiv_32ns_32nlbW_U28(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd3226013659),
    .din1(tmp_10_reg_952),
    .ce(1'b1),
    .dout(grp_fu_506_p2)
);

FFT_sitofp_32ns_3mb6 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_sitofp_32ns_3mb6_U29(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_511_p0),
    .ce(1'b1),
    .dout(grp_fu_511_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        array_last_0_sel_rd <= 1'b0;
    end else begin
        if (((array_last_0_ack_out == 1'b1) & (array_last_0_vld_out == 1'b1))) begin
            array_last_0_sel_rd <= ~array_last_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        array_last_0_sel_wr <= 1'b0;
    end else begin
        if (((array_last_0_ack_in == 1'b1) & (array_last_0_vld_in == 1'b1))) begin
            array_last_0_sel_wr <= ~array_last_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        array_last_0_state <= 2'd0;
    end else begin
        if ((((array_last_0_state == 2'd2) & (array_last_0_vld_in == 1'b0)) | ((array_last_0_state == 2'd3) & (array_last_0_vld_in == 1'b0) & (array_last_0_ack_out == 1'b1)))) begin
            array_last_0_state <= 2'd2;
        end else if ((((array_last_0_state == 2'd1) & (array_last_0_ack_out == 1'b0)) | ((array_last_0_state == 2'd3) & (array_last_0_ack_out == 1'b0) & (array_last_0_vld_in == 1'b1)))) begin
            array_last_0_state <= 2'd1;
        end else if (((~((array_last_0_vld_in == 1'b0) & (array_last_0_ack_out == 1'b1)) & ~((array_last_0_ack_out == 1'b0) & (array_last_0_vld_in == 1'b1)) & (array_last_0_state == 2'd3)) | ((array_last_0_state == 2'd1) & (array_last_0_ack_out == 1'b1)) | ((array_last_0_state == 2'd2) & (array_last_0_vld_in == 1'b1)))) begin
            array_last_0_state <= 2'd3;
        end else begin
            array_last_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        array_r_0_sel_rd <= 1'b0;
    end else begin
        if (((array_r_0_ack_out == 1'b1) & (array_r_0_vld_out == 1'b1))) begin
            array_r_0_sel_rd <= ~array_r_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        array_r_0_sel_wr <= 1'b0;
    end else begin
        if (((array_r_0_ack_in == 1'b1) & (array_r_0_vld_in == 1'b1))) begin
            array_r_0_sel_wr <= ~array_r_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        array_r_0_state <= 2'd0;
    end else begin
        if ((((array_r_0_state == 2'd2) & (array_r_0_vld_in == 1'b0)) | ((array_r_0_state == 2'd3) & (array_r_0_vld_in == 1'b0) & (array_r_0_ack_out == 1'b1)))) begin
            array_r_0_state <= 2'd2;
        end else if ((((array_r_0_state == 2'd1) & (array_r_0_ack_out == 1'b0)) | ((array_r_0_state == 2'd3) & (array_r_0_ack_out == 1'b0) & (array_r_0_vld_in == 1'b1)))) begin
            array_r_0_state <= 2'd1;
        end else if (((~((array_r_0_ack_out == 1'b0) & (array_r_0_vld_in == 1'b1)) & ~((array_r_0_vld_in == 1'b0) & (array_r_0_ack_out == 1'b1)) & (array_r_0_state == 2'd3)) | ((array_r_0_state == 2'd1) & (array_r_0_ack_out == 1'b1)) | ((array_r_0_state == 2'd2) & (array_r_0_vld_in == 1'b1)))) begin
            array_r_0_state <= 2'd3;
        end else begin
            array_r_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_sin_or_cos_float_s_fu_431_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state17)) begin
            grp_sin_or_cos_float_s_fu_431_ap_start_reg <= 1'b1;
        end else if ((grp_sin_or_cos_float_s_fu_431_ap_ready == 1'b1)) begin
            grp_sin_or_cos_float_s_fu_431_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_sin_or_cos_float_s_fu_446_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state17)) begin
            grp_sin_or_cos_float_s_fu_446_ap_start_reg <= 1'b1;
        end else if ((grp_sin_or_cos_float_s_fu_446_ap_ready == 1'b1)) begin
            grp_sin_or_cos_float_s_fu_446_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        oparray_1_sel_rd <= 1'b0;
    end else begin
        if (((oparray_1_ack_out == 1'b1) & (oparray_1_vld_out == 1'b1))) begin
            oparray_1_sel_rd <= ~oparray_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        oparray_1_sel_wr <= 1'b0;
    end else begin
        if (((oparray_1_ack_in == 1'b1) & (oparray_1_vld_in == 1'b1))) begin
            oparray_1_sel_wr <= ~oparray_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        oparray_1_state <= 2'd0;
    end else begin
        if ((((oparray_1_state == 2'd2) & (oparray_1_vld_in == 1'b0)) | ((oparray_1_state == 2'd3) & (oparray_1_vld_in == 1'b0) & (oparray_1_ack_out == 1'b1)))) begin
            oparray_1_state <= 2'd2;
        end else if ((((oparray_1_state == 2'd1) & (oparray_1_ack_out == 1'b0)) | ((oparray_1_state == 2'd3) & (oparray_1_ack_out == 1'b0) & (oparray_1_vld_in == 1'b1)))) begin
            oparray_1_state <= 2'd1;
        end else if (((~((oparray_1_vld_in == 1'b0) & (oparray_1_ack_out == 1'b1)) & ~((oparray_1_ack_out == 1'b0) & (oparray_1_vld_in == 1'b1)) & (oparray_1_state == 2'd3)) | ((oparray_1_state == 2'd1) & (oparray_1_ack_out == 1'b1)) | ((oparray_1_state == 2'd2) & (oparray_1_vld_in == 1'b1)))) begin
            oparray_1_state <= 2'd3;
        end else begin
            oparray_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        oparray_last_1_sel_rd <= 1'b0;
    end else begin
        if (((oparray_last_1_ack_out == 1'b1) & (oparray_last_1_vld_out == 1'b1))) begin
            oparray_last_1_sel_rd <= ~oparray_last_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        oparray_last_1_sel_wr <= 1'b0;
    end else begin
        if (((oparray_last_1_ack_in == 1'b1) & (oparray_last_1_vld_in == 1'b1))) begin
            oparray_last_1_sel_wr <= ~oparray_last_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        oparray_last_1_state <= 2'd0;
    end else begin
        if ((((oparray_last_1_state == 2'd2) & (oparray_last_1_vld_in == 1'b0)) | ((oparray_last_1_state == 2'd3) & (oparray_last_1_vld_in == 1'b0) & (oparray_last_1_ack_out == 1'b1)))) begin
            oparray_last_1_state <= 2'd2;
        end else if ((((oparray_last_1_state == 2'd1) & (oparray_last_1_ack_out == 1'b0)) | ((oparray_last_1_state == 2'd3) & (oparray_last_1_ack_out == 1'b0) & (oparray_last_1_vld_in == 1'b1)))) begin
            oparray_last_1_state <= 2'd1;
        end else if (((~((oparray_last_1_vld_in == 1'b0) & (oparray_last_1_ack_out == 1'b1)) & ~((oparray_last_1_ack_out == 1'b0) & (oparray_last_1_vld_in == 1'b1)) & (oparray_last_1_state == 2'd3)) | ((oparray_last_1_state == 2'd1) & (oparray_last_1_ack_out == 1'b1)) | ((oparray_last_1_state == 2'd2) & (oparray_last_1_vld_in == 1'b1)))) begin
            oparray_last_1_state <= 2'd3;
        end else begin
            oparray_last_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_558_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a1_reg_309 <= a_cast5_cast_fu_554_p1;
    end else if (((exitcond5_fu_570_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        a1_reg_309 <= tmp_6_fu_602_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_548_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        a_reg_287 <= 11'd0;
    end else if ((~((tmp_7_fu_624_p2 == 1'd1) & (array_r_0_vld_out == 1'b0)) & (tmp_7_fu_624_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        a_reg_287 <= i_reg_868;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_570_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        base_reg_329 <= 32'd1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        base_reg_329 <= base_1_fu_689_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_717_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        h_reg_420 <= 11'd0;
    end else if (((1'b1 == ap_CS_fsm_state35) & (oparray_1_ack_in == 1'b1))) begin
        h_reg_420 <= h_1_reg_1076;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_558_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_reg_298 <= 4'd0;
    end else if (((exitcond5_fu_570_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_298 <= j_1_fu_576_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_15_fu_761_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        k2_reg_411 <= k_1_cast2_fu_753_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        k2_reg_411 <= k_2_reg_1036;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_570_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_in_reg_318 <= 4'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        k_0_in_reg_318 <= tmp_32_reg_886;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        k_1_reg_400 <= j_2_reg_1003;
    end else if (((1'b0 == ap_block_state18_on_subcall_done) & (1'b1 == ap_CS_fsm_state18))) begin
        k_1_reg_400 <= 30'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        p_1_93_reg_388 <= grp_fu_461_p2;
    end else if (((1'b0 == ap_block_state18_on_subcall_done) & (1'b1 == ap_CS_fsm_state18))) begin
        p_1_93_reg_388 <= 32'd1065353216;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_558_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_reg_353 <= 11'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_reg_353 <= p_1_reg_912;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        p_s_reg_376 <= grp_fu_465_p2;
    end else if (((1'b0 == ap_block_state18_on_subcall_done) & (1'b1 == ap_CS_fsm_state18))) begin
        p_s_reg_376 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_695_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        s_reg_364 <= 4'd1;
    end else if (((tmp_15_fu_761_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        s_reg_364 <= s_1_fu_772_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_570_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        val_reg_341 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        val_reg_341 <= val_1_fu_683_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((array_last_0_load_A == 1'b1)) begin
        array_last_0_payload_A <= array_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((array_last_0_load_B == 1'b1)) begin
        array_last_0_payload_B <= array_r_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((array_r_0_load_A == 1'b1)) begin
        array_r_0_payload_A <= array_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((array_r_0_load_B == 1'b1)) begin
        array_r_0_payload_B <= array_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        c_imag_1_reg_1058 <= grp_fu_473_p2;
        c_real_1_reg_1053 <= grp_fu_469_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((oparray_last_1_ack_in == 1'b0) | (oparray_1_ack_in == 1'b0)) & (tmp_s_reg_856 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
        h_1_reg_1076 <= h_1_fu_822_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_868 <= i_fu_564_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        j_2_reg_1003 <= j_2_fu_766_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_fu_788_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        k_2_reg_1036 <= k_2_fu_811_p2;
        tmp_imag_addr_2_reg_1021 <= tmp_18_fu_799_p1;
        tmp_imag_addr_3_reg_1031 <= tmp_19_fu_805_p1;
        tmp_real_addr_2_reg_1016 <= tmp_18_fu_799_p1;
        tmp_real_addr_3_reg_1026 <= tmp_19_fu_805_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state18_on_subcall_done) & (1'b1 == ap_CS_fsm_state18))) begin
        m2_reg_978[9 : 0] <= m2_fu_750_p1[9 : 0];
        m_cast_reg_968[10 : 0] <= m_cast_fu_744_p1[10 : 0];
        tmp_8_reg_973[9 : 0] <= tmp_8_fu_747_p1[9 : 0];
        wm_imag_reg_989 <= grp_sin_or_cos_float_s_fu_446_ap_return;
        wm_real_reg_983 <= grp_sin_or_cos_float_s_fu_431_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_717_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        m_reg_936 <= m_fu_723_p2;
        tmp_33_reg_941 <= {{m_fu_723_p2[10:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((oparray_1_load_A == 1'b1)) begin
        oparray_1_payload_A <= oparray_imag_addr_fu_842_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((oparray_1_load_B == 1'b1)) begin
        oparray_1_payload_B <= oparray_imag_addr_fu_842_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((oparray_last_1_load_A == 1'b1)) begin
        oparray_last_1_payload_A <= array_last_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((oparray_last_1_load_B == 1'b1)) begin
        oparray_last_1_payload_B <= array_last_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_1_reg_912 <= p_1_fu_701_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((icmp_fu_788_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20)))) begin
        reg_514 <= grp_fu_477_p2;
        reg_519 <= grp_fu_482_p2;
        reg_524 <= grp_fu_487_p2;
        reg_529 <= grp_fu_492_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state24))) begin
        reg_534 <= grp_fu_461_p2;
        reg_541 <= grp_fu_465_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_10_reg_952 <= grp_fu_511_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((tmp_7_fu_624_p2 == 1'd1) & (array_r_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_32_reg_886 <= tmp_32_fu_620_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_695_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_4_reg_917[10 : 0] <= tmp_4_fu_707_p1[10 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_s_reg_856 <= tmp_s_fu_548_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        u_imag_reg_1047 <= tmp_imag_q0;
        u_real_reg_1041 <= tmp_real_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        x_assign_1_reg_963 <= grp_fu_506_p2;
        x_assign_reg_958 <= grp_fu_501_p2;
    end
end

always @ (*) begin
    if ((~((oparray_last_1_ack_in == 1'b0) | (oparray_1_ack_in == 1'b0)) & (oparray_last_1_state[1'd0] == 1'b0) & (oparray_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state33) & ((exitcond_fu_816_p2 == 1'd1) | (tmp_s_reg_856 == 1'd0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((oparray_last_1_ack_in == 1'b0) | (oparray_1_ack_in == 1'b0)) & (oparray_last_1_state[1'd0] == 1'b0) & (oparray_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state33) & ((exitcond_fu_816_p2 == 1'd1) | (tmp_s_reg_856 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((~((array_r_0_vld_out == 1'b0) | (oparray_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state34)) | (~((tmp_7_fu_624_p2 == 1'd1) & (array_r_0_vld_out == 1'b0)) & (tmp_7_fu_624_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
        array_last_0_ack_out = 1'b1;
    end else begin
        array_last_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((array_last_0_sel == 1'b1)) begin
        array_last_0_data_out = array_last_0_payload_B;
    end else begin
        array_last_0_data_out = array_last_0_payload_A;
    end
end

always @ (*) begin
    if (((~((array_r_0_vld_out == 1'b0) | (oparray_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state34)) | (~((tmp_7_fu_624_p2 == 1'd1) & (array_r_0_vld_out == 1'b0)) & (tmp_7_fu_624_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
        array_r_0_ack_out = 1'b1;
    end else begin
        array_r_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((array_r_0_sel == 1'b1)) begin
        array_r_0_data_out = array_r_0_payload_B;
    end else begin
        array_r_0_data_out = array_r_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | ((tmp_7_fu_624_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)))) begin
        array_r_TDATA_blk_n = array_r_0_state[1'd0];
    end else begin
        array_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bin_address0 = tmp_12_fu_630_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        bin_address0 = tmp_5_fu_582_p1;
    end else begin
        bin_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (~((tmp_7_fu_624_p2 == 1'd1) & (array_r_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state4)))) begin
        bin_ce0 = 1'b1;
    end else begin
        bin_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond5_fu_570_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        bin_we0 = 1'b1;
    end else begin
        bin_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_461_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_461_opcode = 2'd0;
    end else begin
        grp_fu_461_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_461_p0 = u_real_reg_1041;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_461_p0 = reg_514;
    end else begin
        grp_fu_461_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_461_p1 = reg_534;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_461_p1 = reg_519;
    end else begin
        grp_fu_461_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_465_p0 = u_imag_reg_1047;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_465_p0 = reg_524;
    end else begin
        grp_fu_465_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_465_p1 = reg_541;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state22))) begin
        grp_fu_465_p1 = reg_529;
    end else begin
        grp_fu_465_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_477_p1 = tmp_real_q0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_477_p1 = wm_real_reg_983;
    end else begin
        grp_fu_477_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_482_p1 = tmp_imag_q0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_482_p1 = wm_imag_reg_989;
    end else begin
        grp_fu_482_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_487_p1 = tmp_imag_q0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_487_p1 = wm_imag_reg_989;
    end else begin
        grp_fu_487_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_492_p0 = tmp_real_q0;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_492_p0 = wm_real_reg_983;
    end else begin
        grp_fu_492_p0 = 'bx;
    end
end

always @ (*) begin
    if ((oparray_1_sel == 1'b1)) begin
        oparray_1_data_out = oparray_1_payload_B;
    end else begin
        oparray_1_data_out = oparray_1_payload_A;
    end
end

always @ (*) begin
    if ((~((array_r_0_vld_out == 1'b0) | (oparray_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state34))) begin
        oparray_1_vld_in = 1'b1;
    end else begin
        oparray_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34))) begin
        oparray_TDATA_blk_n = oparray_1_state[1'd1];
    end else begin
        oparray_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((oparray_last_1_sel == 1'b1)) begin
        oparray_last_1_data_out = oparray_last_1_payload_B;
    end else begin
        oparray_last_1_data_out = oparray_last_1_payload_A;
    end
end

always @ (*) begin
    if ((~((array_r_0_vld_out == 1'b0) | (oparray_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state34))) begin
        oparray_last_1_vld_in = 1'b1;
    end else begin
        oparray_last_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        tmp_imag_address0 = tmp_16_fu_828_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        tmp_imag_address0 = tmp_imag_addr_2_reg_1021;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23))) begin
        tmp_imag_address0 = tmp_imag_addr_3_reg_1031;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_imag_address0 = tmp_18_fu_799_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_imag_address0 = tmp_4_reg_917;
    end else begin
        tmp_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state20) | (~((oparray_last_1_ack_in == 1'b0) | (oparray_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state33)))) begin
        tmp_imag_ce0 = 1'b1;
    end else begin
        tmp_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        tmp_imag_d0 = c_imag_1_reg_1058;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_imag_d0 = reg_541;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_imag_d0 = tmparr_imag_q0;
    end else begin
        tmp_imag_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state7))) begin
        tmp_imag_we0 = 1'b1;
    end else begin
        tmp_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        tmp_real_address0 = tmp_16_fu_828_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        tmp_real_address0 = tmp_real_addr_2_reg_1016;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23))) begin
        tmp_real_address0 = tmp_real_addr_3_reg_1026;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_real_address0 = tmp_18_fu_799_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_real_address0 = tmp_4_reg_917;
    end else begin
        tmp_real_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state20) | (~((oparray_last_1_ack_in == 1'b0) | (oparray_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state33)))) begin
        tmp_real_ce0 = 1'b1;
    end else begin
        tmp_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        tmp_real_d0 = c_real_1_reg_1053;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_real_d0 = reg_534;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_real_d0 = tmparr_real_q0;
    end else begin
        tmp_real_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state7))) begin
        tmp_real_we0 = 1'b1;
    end else begin
        tmp_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmparr_imag_address0 = tmp_4_fu_707_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmparr_imag_address0 = tmp_11_fu_648_p1;
    end else begin
        tmparr_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (~((tmp_7_fu_624_p2 == 1'd1) & (array_r_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state4)))) begin
        tmparr_imag_ce0 = 1'b1;
    end else begin
        tmparr_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((tmp_7_fu_624_p2 == 1'd1) & (array_r_0_vld_out == 1'b0)) & (tmp_7_fu_624_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmparr_imag_we0 = 1'b1;
    end else begin
        tmparr_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmparr_real_address0 = tmp_4_fu_707_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        tmparr_real_address0 = tmp_11_fu_648_p1;
    end else begin
        tmparr_real_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (~((tmp_7_fu_624_p2 == 1'd1) & (array_r_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state4)))) begin
        tmparr_real_ce0 = 1'b1;
    end else begin
        tmparr_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((tmp_7_fu_624_p2 == 1'd1) & (array_r_0_vld_out == 1'b0)) & (tmp_7_fu_624_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmparr_real_we0 = 1'b1;
    end else begin
        tmparr_real_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((tmp_s_fu_548_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((tmp_s_fu_548_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond3_fu_558_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond5_fu_570_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((tmp_7_fu_624_p2 == 1'd1) & (array_r_0_vld_out == 1'b0)) & (tmp_7_fu_624_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((tmp_7_fu_624_p2 == 1'd1) & (array_r_0_vld_out == 1'b0)) & (tmp_7_fu_624_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond2_fu_695_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((exitcond4_fu_717_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b0 == ap_block_state18_on_subcall_done) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((tmp_15_fu_761_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((icmp_fu_788_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state33 : begin
            if ((~((oparray_last_1_ack_in == 1'b0) | (oparray_1_ack_in == 1'b0)) & (oparray_last_1_state[1'd0] == 1'b0) & (oparray_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state33) & ((exitcond_fu_816_p2 == 1'd1) | (tmp_s_reg_856 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((oparray_last_1_ack_in == 1'b0) | (oparray_1_ack_in == 1'b0)) & (tmp_s_reg_856 == 1'd1) & (exitcond_fu_816_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if ((~((array_r_0_vld_out == 1'b0) | (oparray_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (oparray_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_cast5_cast_fu_554_p1 = a_reg_287;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state18_on_subcall_done = ((grp_sin_or_cos_float_s_fu_446_ap_done == 1'b0) | (grp_sin_or_cos_float_s_fu_431_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state33 = ((oparray_last_1_ack_in == 1'b0) | (oparray_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((tmp_7_fu_624_p2 == 1'd1) & (array_r_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign array_imag_load_new9_fu_654_p4 = {{array_r_0_data_out[63:32]}};

assign array_last_0_ack_in = array_last_0_state[1'd1];

assign array_last_0_load_A = (~array_last_0_sel_wr & array_last_0_state_cmp_full);

assign array_last_0_load_B = (array_last_0_state_cmp_full & array_last_0_sel_wr);

assign array_last_0_sel = array_last_0_sel_rd;

assign array_last_0_state_cmp_full = ((array_last_0_state != 2'd1) ? 1'b1 : 1'b0);

assign array_last_0_vld_in = array_r_TVALID;

assign array_last_0_vld_out = array_last_0_state[1'd0];

assign array_r_0_ack_in = array_r_0_state[1'd1];

assign array_r_0_load_A = (~array_r_0_sel_wr & array_r_0_state_cmp_full);

assign array_r_0_load_B = (array_r_0_state_cmp_full & array_r_0_sel_wr);

assign array_r_0_sel = array_r_0_sel_rd;

assign array_r_0_state_cmp_full = ((array_r_0_state != 2'd1) ? 1'b1 : 1'b0);

assign array_r_0_vld_in = array_r_TVALID;

assign array_r_0_vld_out = array_r_0_state[1'd0];

assign array_r_TREADY = array_last_0_state[1'd1];

assign base_1_fu_689_p2 = base_reg_329 << 32'd1;

assign bin_d0 = a1_reg_309[0:0];

assign exitcond2_fu_695_p2 = ((p_reg_353 == 11'd1024) ? 1'b1 : 1'b0);

assign exitcond3_fu_558_p2 = ((a_reg_287 == 11'd1024) ? 1'b1 : 1'b0);

assign exitcond4_fu_717_p2 = ((s_reg_364 == 4'd11) ? 1'b1 : 1'b0);

assign exitcond5_fu_570_p2 = ((j_reg_298 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_fu_816_p2 = ((h_reg_420 == 11'd1024) ? 1'b1 : 1'b0);

assign grp_fu_511_p0 = tmp_33_fu_729_p4;

assign grp_sin_or_cos_float_s_fu_431_ap_start = grp_sin_or_cos_float_s_fu_431_ap_start_reg;

assign grp_sin_or_cos_float_s_fu_431_do_cos = 1'd1;

assign grp_sin_or_cos_float_s_fu_446_ap_start = grp_sin_or_cos_float_s_fu_446_ap_start_reg;

assign grp_sin_or_cos_float_s_fu_446_do_cos = 1'd0;

assign h_1_fu_822_p2 = (h_reg_420 + 11'd1);

assign i_fu_564_p2 = (a_reg_287 + 11'd1);

assign icmp_fu_788_p2 = (($signed(tmp_36_fu_778_p4) < $signed(22'd1)) ? 1'b1 : 1'b0);

assign j_1_fu_576_p2 = (j_reg_298 + 4'd1);

assign j_2_fu_766_p2 = (k_1_reg_400 + 30'd1);

assign k_0_in_cast_fu_606_p1 = k_0_in_reg_318;

assign k_1_cast2_fu_753_p1 = k_1_reg_400;

assign k_1_cast_fu_757_p1 = k_1_reg_400;

assign k_2_fu_811_p2 = ($signed(m_cast_reg_968) + $signed(k2_reg_411));

assign k_cast8_fu_616_p1 = k_fu_610_p2;

assign k_fu_610_p2 = ($signed(5'd31) + $signed(k_0_in_cast_fu_606_p1));

assign m2_fu_750_p1 = tmp_33_reg_941;

assign m_cast_fu_744_p1 = m_reg_936;

assign m_fu_723_p2 = 11'd1 << s_cast_fu_713_p1;

assign oparray_1_ack_in = oparray_1_state[1'd1];

assign oparray_1_ack_out = oparray_TREADY;

assign oparray_1_load_A = (oparray_1_state_cmp_full & ~oparray_1_sel_wr);

assign oparray_1_load_B = (oparray_1_state_cmp_full & oparray_1_sel_wr);

assign oparray_1_sel = oparray_1_sel_rd;

assign oparray_1_state_cmp_full = ((oparray_1_state != 2'd1) ? 1'b1 : 1'b0);

assign oparray_1_vld_out = oparray_1_state[1'd0];

assign oparray_TDATA = oparray_1_data_out;

assign oparray_TLAST = oparray_last_1_data_out;

assign oparray_TVALID = oparray_last_1_state[1'd0];

assign oparray_imag_addr_fu_842_p3 = {{tmp_imag_load_toint_fu_838_p1}, {tmp_real_load_toint_fu_834_p1}};

assign oparray_last_1_ack_in = oparray_last_1_state[1'd1];

assign oparray_last_1_ack_out = oparray_TREADY;

assign oparray_last_1_load_A = (oparray_last_1_state_cmp_full & ~oparray_last_1_sel_wr);

assign oparray_last_1_load_B = (oparray_last_1_state_cmp_full & oparray_last_1_sel_wr);

assign oparray_last_1_sel = oparray_last_1_sel_rd;

assign oparray_last_1_state_cmp_full = ((oparray_last_1_state != 2'd1) ? 1'b1 : 1'b0);

assign oparray_last_1_vld_out = oparray_last_1_state[1'd0];

assign p_1_fu_701_p2 = (p_reg_353 + 11'd1);

assign s_1_fu_772_p2 = (s_reg_364 + 4'd1);

assign s_cast_fu_713_p1 = s_reg_364;

assign tmp_11_fu_648_p1 = val_reg_341;

assign tmp_12_fu_630_p1 = $unsigned(k_cast8_fu_616_p1);

assign tmp_13_fu_669_p3 = ((bin_q0[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign tmp_14_fu_677_p2 = (tmp_13_fu_669_p3 & base_reg_329);

assign tmp_15_fu_761_p2 = ((k_1_cast_fu_757_p1 < tmp_8_reg_973) ? 1'b1 : 1'b0);

assign tmp_16_fu_828_p1 = h_reg_420;

assign tmp_17_fu_794_p2 = ($signed(k2_reg_411) + $signed(m2_reg_978));

assign tmp_18_fu_799_p1 = $signed(tmp_17_fu_794_p2);

assign tmp_19_fu_805_p1 = k2_reg_411;

assign tmp_31_fu_592_p4 = {{a1_reg_309[29:1]}};

assign tmp_32_fu_620_p1 = k_fu_610_p2[3:0];

assign tmp_33_fu_729_p4 = {{m_fu_723_p2[10:1]}};

assign tmp_34_fu_639_p1 = array_r_0_data_out[31:0];

assign tmp_36_fu_778_p4 = {{k2_reg_411[31:10]}};

assign tmp_4_fu_707_p1 = p_reg_353;

assign tmp_5_fu_582_p1 = j_reg_298;

assign tmp_6_fu_602_p1 = $signed(tmp_31_fu_592_p4);

assign tmp_7_fu_624_p2 = ((k_0_in_reg_318 == 4'd0) ? 1'b1 : 1'b0);

assign tmp_8_fu_747_p1 = tmp_33_reg_941;

assign tmp_imag_load_toint_fu_838_p1 = tmp_imag_q0;

assign tmp_real_load_toint_fu_834_p1 = tmp_real_q0;

assign tmp_s_fu_548_p2 = (($signed(control) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign tmparr_imag_d0 = array_imag_load_new9_fu_654_p4;

assign tmparr_real_d0 = tmp_34_fu_639_p1;

assign val_1_fu_683_p2 = ($signed(val_reg_341) + $signed(tmp_14_fu_677_p2));

always @ (posedge ap_clk) begin
    tmp_4_reg_917[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    m_cast_reg_968[31:11] <= 21'b000000000000000000000;
    tmp_8_reg_973[30:10] <= 21'b000000000000000000000;
    m2_reg_978[31:10] <= 22'b0000000000000000000000;
end

endmodule //FFT
