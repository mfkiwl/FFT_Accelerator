// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module scaled_fixed2ieee (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V,
        prescale,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;
parameter    ap_const_lv32_0 = 32'd0;


input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [28:0] in_V;
input  [8:0] prescale;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] out_bits_0_V_fu_192_p5;
reg   [31:0] out_bits_0_V_reg_477;
wire   [31:0] p_Result_s_fu_216_p5;
reg   [31:0] p_Result_s_reg_482;
wire   [1:0] i_fu_234_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] c_1_1_fu_278_p3;
wire   [0:0] exitcond_fu_228_p2;
wire   [31:0] c_1_2_fu_286_p3;
wire   [1:0] i_1_fu_302_p2;
wire    ap_CS_fsm_state3;
wire   [31:0] shift_2_fu_320_p2;
wire   [0:0] tmp_21_fu_294_p3;
wire   [28:0] r_V_fu_373_p3;
reg   [31:0] c_0_s_reg_88;
reg   [31:0] c_1_s_reg_100;
reg   [1:0] i1_reg_112;
reg   [28:0] p_s_reg_123;
wire   [0:0] tmp_1_fu_382_p2;
reg   [31:0] shift_reg_132;
reg   [1:0] i2_reg_143;
reg   [28:0] ap_phi_mux_p_Val2_s_phi_fu_157_p4;
reg   [31:0] ap_phi_mux_shift_1_phi_fu_167_p4;
wire   [15:0] p_Result_1_fu_174_p4;
wire   [16:0] tmp_fu_184_p3;
wire   [12:0] tmp_19_fu_204_p1;
wire   [13:0] tmp_4_fu_208_p3;
wire   [0:0] tmp_20_fu_240_p1;
reg   [31:0] tmp_8_fu_244_p4;
reg   [31:0] tmp_9_fu_253_p4;
wire   [31:0] p_Result_29_fu_262_p3;
reg   [31:0] c_0_fu_270_p3;
wire   [0:0] tmp_22_fu_308_p1;
wire   [31:0] sh_assign_fu_312_p3;
wire   [0:0] isNeg_fu_327_p3;
wire   [31:0] tmp_5_fu_335_p2;
wire   [31:0] tmp_6_fu_349_p1;
wire   [31:0] ush_fu_341_p3;
wire   [31:0] tmp_7_fu_353_p2;
wire   [31:0] tmp_s_fu_359_p2;
wire   [28:0] tmp_24_fu_365_p1;
wire   [28:0] tmp_25_fu_369_p1;
wire   [8:0] tmp_2_fu_388_p2;
wire  signed [31:0] tmp_2_cast_fu_393_p1;
wire   [31:0] newexp_fu_397_p2;
wire   [0:0] tmp_27_fu_403_p3;
wire   [0:0] tmp_3_fu_411_p2;
wire   [0:0] or_cond_fu_416_p2;
wire   [22:0] phitmp1_fu_426_p4;
wire   [7:0] tmp_28_fu_422_p1;
wire   [7:0] out_exp_V_fu_444_p3;
wire   [22:0] significand_V_fu_436_p3;
wire   [31:0] p_Result_30_fu_452_p4;
wire   [31:0] result_write_assign_fu_462_p1;
reg   [31:0] ap_return_preg;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_return_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_preg[0] <= 1'b0;
        ap_return_preg[1] <= 1'b0;
        ap_return_preg[2] <= 1'b0;
        ap_return_preg[3] <= 1'b0;
        ap_return_preg[4] <= 1'b0;
        ap_return_preg[5] <= 1'b0;
        ap_return_preg[6] <= 1'b0;
        ap_return_preg[7] <= 1'b0;
        ap_return_preg[8] <= 1'b0;
        ap_return_preg[9] <= 1'b0;
        ap_return_preg[10] <= 1'b0;
        ap_return_preg[11] <= 1'b0;
        ap_return_preg[12] <= 1'b0;
        ap_return_preg[13] <= 1'b0;
        ap_return_preg[14] <= 1'b0;
        ap_return_preg[15] <= 1'b0;
        ap_return_preg[16] <= 1'b0;
        ap_return_preg[17] <= 1'b0;
        ap_return_preg[18] <= 1'b0;
        ap_return_preg[19] <= 1'b0;
        ap_return_preg[20] <= 1'b0;
        ap_return_preg[21] <= 1'b0;
        ap_return_preg[22] <= 1'b0;
        ap_return_preg[23] <= 1'b0;
        ap_return_preg[24] <= 1'b0;
        ap_return_preg[25] <= 1'b0;
        ap_return_preg[26] <= 1'b0;
        ap_return_preg[27] <= 1'b0;
        ap_return_preg[28] <= 1'b0;
        ap_return_preg[29] <= 1'b0;
        ap_return_preg[30] <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) & ((tmp_21_fu_294_p3 == 1'd1) | (tmp_1_fu_382_p2 == 1'd0)))) begin
                        ap_return_preg[30 : 0] <= result_write_assign_fu_462_p1[30 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_reg_112 <= i_fu_234_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i1_reg_112 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_228_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i2_reg_143 <= 2'd0;
    end else if (((tmp_1_fu_382_p2 == 1'd1) & (tmp_21_fu_294_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i2_reg_143 <= i_1_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_228_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_s_reg_123 <= in_V;
    end else if (((tmp_1_fu_382_p2 == 1'd1) & (tmp_21_fu_294_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        p_s_reg_123 <= r_V_fu_373_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_228_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_132 <= 32'd0;
    end else if (((tmp_1_fu_382_p2 == 1'd1) & (tmp_21_fu_294_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        shift_reg_132 <= shift_2_fu_320_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_s_reg_88 <= c_1_1_fu_278_p3;
        c_1_s_reg_100 <= c_1_2_fu_286_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        out_bits_0_V_reg_477 <= out_bits_0_V_fu_192_p5;
        p_Result_s_reg_482 <= p_Result_s_fu_216_p5;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & ((tmp_21_fu_294_p3 == 1'd1) | (tmp_1_fu_382_p2 == 1'd0))) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if (((tmp_1_fu_382_p2 == 1'd0) & (tmp_21_fu_294_p3 == 1'd0))) begin
            ap_phi_mux_p_Val2_s_phi_fu_157_p4 = r_V_fu_373_p3;
        end else if ((tmp_21_fu_294_p3 == 1'd1)) begin
            ap_phi_mux_p_Val2_s_phi_fu_157_p4 = p_s_reg_123;
        end else begin
            ap_phi_mux_p_Val2_s_phi_fu_157_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_157_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if (((tmp_1_fu_382_p2 == 1'd0) & (tmp_21_fu_294_p3 == 1'd0))) begin
            ap_phi_mux_shift_1_phi_fu_167_p4 = shift_2_fu_320_p2;
        end else if ((tmp_21_fu_294_p3 == 1'd1)) begin
            ap_phi_mux_shift_1_phi_fu_167_p4 = shift_reg_132;
        end else begin
            ap_phi_mux_shift_1_phi_fu_167_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_shift_1_phi_fu_167_p4 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ((tmp_21_fu_294_p3 == 1'd1) | (tmp_1_fu_382_p2 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ((tmp_21_fu_294_p3 == 1'd1) | (tmp_1_fu_382_p2 == 1'd0)))) begin
        ap_return = result_write_assign_fu_462_p1;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_228_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & ((tmp_21_fu_294_p3 == 1'd1) | (tmp_1_fu_382_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];


always @ (p_Result_29_fu_262_p3) begin
    if (p_Result_29_fu_262_p3[0] == 1'b1) begin
        c_0_fu_270_p3 = 32'd0;
    end else if (p_Result_29_fu_262_p3[1] == 1'b1) begin
        c_0_fu_270_p3 = 32'd1;
    end else if (p_Result_29_fu_262_p3[2] == 1'b1) begin
        c_0_fu_270_p3 = 32'd2;
    end else if (p_Result_29_fu_262_p3[3] == 1'b1) begin
        c_0_fu_270_p3 = 32'd3;
    end else if (p_Result_29_fu_262_p3[4] == 1'b1) begin
        c_0_fu_270_p3 = 32'd4;
    end else if (p_Result_29_fu_262_p3[5] == 1'b1) begin
        c_0_fu_270_p3 = 32'd5;
    end else if (p_Result_29_fu_262_p3[6] == 1'b1) begin
        c_0_fu_270_p3 = 32'd6;
    end else if (p_Result_29_fu_262_p3[7] == 1'b1) begin
        c_0_fu_270_p3 = 32'd7;
    end else if (p_Result_29_fu_262_p3[8] == 1'b1) begin
        c_0_fu_270_p3 = 32'd8;
    end else if (p_Result_29_fu_262_p3[9] == 1'b1) begin
        c_0_fu_270_p3 = 32'd9;
    end else if (p_Result_29_fu_262_p3[10] == 1'b1) begin
        c_0_fu_270_p3 = 32'd10;
    end else if (p_Result_29_fu_262_p3[11] == 1'b1) begin
        c_0_fu_270_p3 = 32'd11;
    end else if (p_Result_29_fu_262_p3[12] == 1'b1) begin
        c_0_fu_270_p3 = 32'd12;
    end else if (p_Result_29_fu_262_p3[13] == 1'b1) begin
        c_0_fu_270_p3 = 32'd13;
    end else if (p_Result_29_fu_262_p3[14] == 1'b1) begin
        c_0_fu_270_p3 = 32'd14;
    end else if (p_Result_29_fu_262_p3[15] == 1'b1) begin
        c_0_fu_270_p3 = 32'd15;
    end else if (p_Result_29_fu_262_p3[16] == 1'b1) begin
        c_0_fu_270_p3 = 32'd16;
    end else if (p_Result_29_fu_262_p3[17] == 1'b1) begin
        c_0_fu_270_p3 = 32'd17;
    end else if (p_Result_29_fu_262_p3[18] == 1'b1) begin
        c_0_fu_270_p3 = 32'd18;
    end else if (p_Result_29_fu_262_p3[19] == 1'b1) begin
        c_0_fu_270_p3 = 32'd19;
    end else if (p_Result_29_fu_262_p3[20] == 1'b1) begin
        c_0_fu_270_p3 = 32'd20;
    end else if (p_Result_29_fu_262_p3[21] == 1'b1) begin
        c_0_fu_270_p3 = 32'd21;
    end else if (p_Result_29_fu_262_p3[22] == 1'b1) begin
        c_0_fu_270_p3 = 32'd22;
    end else if (p_Result_29_fu_262_p3[23] == 1'b1) begin
        c_0_fu_270_p3 = 32'd23;
    end else if (p_Result_29_fu_262_p3[24] == 1'b1) begin
        c_0_fu_270_p3 = 32'd24;
    end else if (p_Result_29_fu_262_p3[25] == 1'b1) begin
        c_0_fu_270_p3 = 32'd25;
    end else if (p_Result_29_fu_262_p3[26] == 1'b1) begin
        c_0_fu_270_p3 = 32'd26;
    end else if (p_Result_29_fu_262_p3[27] == 1'b1) begin
        c_0_fu_270_p3 = 32'd27;
    end else if (p_Result_29_fu_262_p3[28] == 1'b1) begin
        c_0_fu_270_p3 = 32'd28;
    end else if (p_Result_29_fu_262_p3[29] == 1'b1) begin
        c_0_fu_270_p3 = 32'd29;
    end else if (p_Result_29_fu_262_p3[30] == 1'b1) begin
        c_0_fu_270_p3 = 32'd30;
    end else if (p_Result_29_fu_262_p3[31] == 1'b1) begin
        c_0_fu_270_p3 = 32'd31;
    end else begin
        c_0_fu_270_p3 = 32'd32;
    end
end

assign c_1_1_fu_278_p3 = ((tmp_20_fu_240_p1[0:0] === 1'b1) ? c_0_s_reg_88 : c_0_fu_270_p3);

assign c_1_2_fu_286_p3 = ((tmp_20_fu_240_p1[0:0] === 1'b1) ? c_0_fu_270_p3 : c_1_s_reg_100);

assign exitcond_fu_228_p2 = ((i1_reg_112 == 2'd2) ? 1'b1 : 1'b0);

assign i_1_fu_302_p2 = (i2_reg_143 + 2'd1);

assign i_fu_234_p2 = (i1_reg_112 + 2'd1);

assign isNeg_fu_327_p3 = sh_assign_fu_312_p3[32'd31];

assign newexp_fu_397_p2 = ($signed(tmp_2_cast_fu_393_p1) - $signed(ap_phi_mux_shift_1_phi_fu_167_p4));

assign or_cond_fu_416_p2 = (tmp_3_fu_411_p2 | tmp_27_fu_403_p3);

assign out_bits_0_V_fu_192_p5 = {{tmp_fu_184_p3}, {ap_const_lv32_0[14:0]}};

assign out_exp_V_fu_444_p3 = ((or_cond_fu_416_p2[0:0] === 1'b1) ? 8'd0 : tmp_28_fu_422_p1);

assign p_Result_1_fu_174_p4 = {{in_V[28:13]}};

assign p_Result_29_fu_262_p3 = ((tmp_20_fu_240_p1[0:0] === 1'b1) ? tmp_8_fu_244_p4 : tmp_9_fu_253_p4);

assign p_Result_30_fu_452_p4 = {{{{1'd0}, {out_exp_V_fu_444_p3}}}, {significand_V_fu_436_p3}};

assign p_Result_s_fu_216_p5 = {{tmp_4_fu_208_p3}, {ap_const_lv32_0[17:0]}};

assign phitmp1_fu_426_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_157_p4[27:5]}};

assign r_V_fu_373_p3 = ((isNeg_fu_327_p3[0:0] === 1'b1) ? tmp_24_fu_365_p1 : tmp_25_fu_369_p1);

assign result_write_assign_fu_462_p1 = p_Result_30_fu_452_p4;

assign sh_assign_fu_312_p3 = ((tmp_22_fu_308_p1[0:0] === 1'b1) ? c_1_s_reg_100 : c_0_s_reg_88);

assign shift_2_fu_320_p2 = (sh_assign_fu_312_p3 + shift_reg_132);

assign significand_V_fu_436_p3 = ((or_cond_fu_416_p2[0:0] === 1'b1) ? 23'd0 : phitmp1_fu_426_p4);

assign tmp_19_fu_204_p1 = in_V[12:0];

assign tmp_1_fu_382_p2 = ((sh_assign_fu_312_p3 == 32'd16) ? 1'b1 : 1'b0);

assign tmp_20_fu_240_p1 = i1_reg_112[0:0];

assign tmp_21_fu_294_p3 = i2_reg_143[32'd1];

assign tmp_22_fu_308_p1 = i2_reg_143[0:0];

assign tmp_24_fu_365_p1 = tmp_7_fu_353_p2[28:0];

assign tmp_25_fu_369_p1 = tmp_s_fu_359_p2[28:0];

assign tmp_27_fu_403_p3 = newexp_fu_397_p2[32'd31];

assign tmp_28_fu_422_p1 = newexp_fu_397_p2[7:0];

assign tmp_2_cast_fu_393_p1 = $signed(tmp_2_fu_388_p2);

assign tmp_2_fu_388_p2 = (9'd127 - prescale);

assign tmp_3_fu_411_p2 = ((in_V == 29'd0) ? 1'b1 : 1'b0);

assign tmp_4_fu_208_p3 = {{tmp_19_fu_204_p1}, {1'd1}};

assign tmp_5_fu_335_p2 = (32'd0 - sh_assign_fu_312_p3);

assign tmp_6_fu_349_p1 = p_s_reg_123;

assign tmp_7_fu_353_p2 = tmp_6_fu_349_p1 >> ush_fu_341_p3;

integer ap_tvar_int_0;

always @ (p_Result_s_reg_482) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            tmp_8_fu_244_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_8_fu_244_p4[ap_tvar_int_0] = p_Result_s_reg_482[31 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (out_bits_0_V_reg_477) begin
    for (ap_tvar_int_1 = 32 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 31 - 0) begin
            tmp_9_fu_253_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_9_fu_253_p4[ap_tvar_int_1] = out_bits_0_V_reg_477[31 - ap_tvar_int_1];
        end
    end
end

assign tmp_fu_184_p3 = {{p_Result_1_fu_174_p4}, {1'd1}};

assign tmp_s_fu_359_p2 = tmp_6_fu_349_p1 << ush_fu_341_p3;

assign ush_fu_341_p3 = ((isNeg_fu_327_p3[0:0] === 1'b1) ? tmp_5_fu_335_p2 : sh_assign_fu_312_p3);

always @ (posedge ap_clk) begin
    ap_return_preg[31] <= 1'b0;
end

endmodule //scaled_fixed2ieee
