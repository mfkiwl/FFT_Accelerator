-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFT is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    array_r_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    array_r_TVALID : IN STD_LOGIC;
    array_r_TREADY : OUT STD_LOGIC;
    array_r_TLAST : IN STD_LOGIC;
    oparray_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    oparray_TVALID : OUT STD_LOGIC;
    oparray_TREADY : IN STD_LOGIC;
    oparray_TLAST : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of FFT is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "FFT,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=25.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=20.390300,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=44,HLS_SYN_FF=5003,HLS_SYN_LUT=11857,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (34 downto 0) := "00000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (34 downto 0) := "00000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (34 downto 0) := "00000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (34 downto 0) := "00000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (34 downto 0) := "00000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (34 downto 0) := "00000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (34 downto 0) := "00001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (34 downto 0) := "00010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (34 downto 0) := "00100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (34 downto 0) := "01000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (34 downto 0) := "10000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_40490FDB : STD_LOGIC_VECTOR (31 downto 0) := "01000000010010010000111111011011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C0490FDB : STD_LOGIC_VECTOR (31 downto 0) := "11000000010010010000111111011011";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv30_1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal array_r_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal array_r_0_vld_in : STD_LOGIC;
    signal array_r_0_vld_out : STD_LOGIC;
    signal array_r_0_ack_in : STD_LOGIC;
    signal array_r_0_ack_out : STD_LOGIC;
    signal array_r_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal array_r_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal array_r_0_sel_rd : STD_LOGIC := '0';
    signal array_r_0_sel_wr : STD_LOGIC := '0';
    signal array_r_0_sel : STD_LOGIC;
    signal array_r_0_load_A : STD_LOGIC;
    signal array_r_0_load_B : STD_LOGIC;
    signal array_r_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal array_r_0_state_cmp_full : STD_LOGIC;
    signal array_last_0_data_out : STD_LOGIC;
    signal array_last_0_vld_in : STD_LOGIC;
    signal array_last_0_vld_out : STD_LOGIC;
    signal array_last_0_ack_in : STD_LOGIC;
    signal array_last_0_ack_out : STD_LOGIC;
    signal array_last_0_payload_A : STD_LOGIC;
    signal array_last_0_payload_B : STD_LOGIC;
    signal array_last_0_sel_rd : STD_LOGIC := '0';
    signal array_last_0_sel_wr : STD_LOGIC := '0';
    signal array_last_0_sel : STD_LOGIC;
    signal array_last_0_load_A : STD_LOGIC;
    signal array_last_0_load_B : STD_LOGIC;
    signal array_last_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal array_last_0_state_cmp_full : STD_LOGIC;
    signal oparray_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal oparray_1_vld_in : STD_LOGIC;
    signal oparray_1_vld_out : STD_LOGIC;
    signal oparray_1_ack_in : STD_LOGIC;
    signal oparray_1_ack_out : STD_LOGIC;
    signal oparray_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal oparray_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal oparray_1_sel_rd : STD_LOGIC := '0';
    signal oparray_1_sel_wr : STD_LOGIC := '0';
    signal oparray_1_sel : STD_LOGIC;
    signal oparray_1_load_A : STD_LOGIC;
    signal oparray_1_load_B : STD_LOGIC;
    signal oparray_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal oparray_1_state_cmp_full : STD_LOGIC;
    signal oparray_last_1_data_out : STD_LOGIC;
    signal oparray_last_1_vld_in : STD_LOGIC;
    signal oparray_last_1_vld_out : STD_LOGIC;
    signal oparray_last_1_ack_in : STD_LOGIC;
    signal oparray_last_1_ack_out : STD_LOGIC;
    signal oparray_last_1_payload_A : STD_LOGIC;
    signal oparray_last_1_payload_B : STD_LOGIC;
    signal oparray_last_1_sel_rd : STD_LOGIC := '0';
    signal oparray_last_1_sel_wr : STD_LOGIC := '0';
    signal oparray_last_1_sel : STD_LOGIC;
    signal oparray_last_1_load_A : STD_LOGIC;
    signal oparray_last_1_load_B : STD_LOGIC;
    signal oparray_last_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal oparray_last_1_state_cmp_full : STD_LOGIC;
    signal control : STD_LOGIC_VECTOR (31 downto 0);
    signal array_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_7_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal oparray_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_fu_477_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_514 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal icmp_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_482_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_519 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_487_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_524 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_492_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_529 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_461_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_534 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_465_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_541 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_856 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_cast5_cast_fu_554_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_564_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_868 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_1_fu_576_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_6_fu_602_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal exitcond5_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_620_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_32_reg_886 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal val_1_fu_683_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal base_1_fu_689_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_fu_701_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_1_reg_912 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_4_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_917 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond2_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_fu_723_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal m_reg_936 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal exitcond4_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_729_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_33_reg_941 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_511_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_952 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_958 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_506_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_1_reg_963 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_cast_fu_744_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_cast_reg_968 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_sin_or_cos_float_s_fu_431_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_431_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_446_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_446_ap_done : STD_LOGIC;
    signal ap_block_state18_on_subcall_done : BOOLEAN;
    signal tmp_8_fu_747_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_8_reg_973 : STD_LOGIC_VECTOR (30 downto 0);
    signal m2_fu_750_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal m2_reg_978 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sin_or_cos_float_s_fu_431_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal wm_real_reg_983 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sin_or_cos_float_s_fu_446_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal wm_imag_reg_989 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_cast2_fu_753_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal j_2_fu_766_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal j_2_reg_1003 : STD_LOGIC_VECTOR (29 downto 0);
    signal s_1_fu_772_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_15_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_real_addr_2_reg_1016 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_imag_addr_2_reg_1021 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_real_addr_3_reg_1026 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_imag_addr_3_reg_1031 : STD_LOGIC_VECTOR (9 downto 0);
    signal k_2_fu_811_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_2_reg_1036 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_real_reg_1041 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_imag_reg_1047 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_469_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_real_1_reg_1053 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_473_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_imag_1_reg_1058 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal h_1_fu_822_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal h_1_reg_1076 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_block_state33 : BOOLEAN;
    signal exitcond_fu_816_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal oparray_imag_addr_fu_842_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmparr_real_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmparr_real_ce0 : STD_LOGIC;
    signal tmparr_real_we0 : STD_LOGIC;
    signal tmparr_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmparr_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmparr_imag_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmparr_imag_ce0 : STD_LOGIC;
    signal tmparr_imag_we0 : STD_LOGIC;
    signal tmparr_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmparr_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_real_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_real_ce0 : STD_LOGIC;
    signal tmp_real_we0 : STD_LOGIC;
    signal tmp_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_imag_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_imag_ce0 : STD_LOGIC;
    signal tmp_imag_we0 : STD_LOGIC;
    signal tmp_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bin_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bin_ce0 : STD_LOGIC;
    signal bin_we0 : STD_LOGIC;
    signal bin_d0 : STD_LOGIC_VECTOR (0 downto 0);
    signal bin_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sin_or_cos_float_s_fu_431_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_431_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_431_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_446_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_446_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_446_do_cos : STD_LOGIC;
    signal a_reg_287 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_reg_298 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond3_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a1_reg_309 : STD_LOGIC_VECTOR (29 downto 0);
    signal k_0_in_reg_318 : STD_LOGIC_VECTOR (3 downto 0);
    signal base_reg_329 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_reg_341 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_reg_353 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal s_reg_364 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_s_reg_376 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_93_reg_388 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_reg_400 : STD_LOGIC_VECTOR (29 downto 0);
    signal k2_reg_411 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal h_reg_420 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_sin_or_cos_float_s_fu_431_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_sin_or_cos_float_s_fu_446_ap_start_reg : STD_LOGIC := '0';
    signal tmp_5_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_799_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_805_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_828_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_461_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_461_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_465_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_465_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_477_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_482_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_487_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_492_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_511_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_592_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal k_0_in_cast_fu_606_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_fu_610_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_cast8_fu_616_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_639_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal array_imag_load_new9_fu_654_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_669_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_677_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_cast_fu_713_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_1_cast_fu_757_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_36_fu_778_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_17_fu_794_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_imag_load_toint_fu_838_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_real_load_toint_fu_834_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_461_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (34 downto 0);

    component sin_or_cos_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (31 downto 0);
        do_cos : IN STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_faddfsub_32nshbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_fadd_32ns_32nibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_fsub_32ns_32njbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_fmul_32ns_32nkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_fdiv_32ns_32nlbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_sitofp_32ns_3mb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_tmparr_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_bin IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (0 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component FFT_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        control : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    FFT_CONTROL_BUS_s_axi_U : component FFT_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        control => control);

    tmparr_real_U : component FFT_tmparr_real
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => tmparr_real_address0,
        ce0 => tmparr_real_ce0,
        we0 => tmparr_real_we0,
        d0 => tmparr_real_d0,
        q0 => tmparr_real_q0);

    tmparr_imag_U : component FFT_tmparr_real
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => tmparr_imag_address0,
        ce0 => tmparr_imag_ce0,
        we0 => tmparr_imag_we0,
        d0 => tmparr_imag_d0,
        q0 => tmparr_imag_q0);

    tmp_real_U : component FFT_tmparr_real
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => tmp_real_address0,
        ce0 => tmp_real_ce0,
        we0 => tmp_real_we0,
        d0 => tmp_real_d0,
        q0 => tmp_real_q0);

    tmp_imag_U : component FFT_tmparr_real
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => tmp_imag_address0,
        ce0 => tmp_imag_ce0,
        we0 => tmp_imag_we0,
        d0 => tmp_imag_d0,
        q0 => tmp_imag_q0);

    bin_U : component FFT_bin
    generic map (
        DataWidth => 1,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => bin_address0,
        ce0 => bin_ce0,
        we0 => bin_we0,
        d0 => bin_d0,
        q0 => bin_q0);

    grp_sin_or_cos_float_s_fu_431 : component sin_or_cos_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sin_or_cos_float_s_fu_431_ap_start,
        ap_done => grp_sin_or_cos_float_s_fu_431_ap_done,
        ap_idle => grp_sin_or_cos_float_s_fu_431_ap_idle,
        ap_ready => grp_sin_or_cos_float_s_fu_431_ap_ready,
        t_in => x_assign_reg_958,
        do_cos => grp_sin_or_cos_float_s_fu_431_do_cos,
        ap_return => grp_sin_or_cos_float_s_fu_431_ap_return);

    grp_sin_or_cos_float_s_fu_446 : component sin_or_cos_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sin_or_cos_float_s_fu_446_ap_start,
        ap_done => grp_sin_or_cos_float_s_fu_446_ap_done,
        ap_idle => grp_sin_or_cos_float_s_fu_446_ap_idle,
        ap_ready => grp_sin_or_cos_float_s_fu_446_ap_ready,
        t_in => x_assign_1_reg_963,
        do_cos => grp_sin_or_cos_float_s_fu_446_do_cos,
        ap_return => grp_sin_or_cos_float_s_fu_446_ap_return);

    FFT_faddfsub_32nshbi_U19 : component FFT_faddfsub_32nshbi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_461_p0,
        din1 => grp_fu_461_p1,
        opcode => grp_fu_461_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_461_p2);

    FFT_fadd_32ns_32nibs_U20 : component FFT_fadd_32ns_32nibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_465_p0,
        din1 => grp_fu_465_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_465_p2);

    FFT_fsub_32ns_32njbC_U21 : component FFT_fsub_32ns_32njbC
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => u_real_reg_1041,
        din1 => reg_534,
        ce => ap_const_logic_1,
        dout => grp_fu_469_p2);

    FFT_fsub_32ns_32njbC_U22 : component FFT_fsub_32ns_32njbC
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => u_imag_reg_1047,
        din1 => reg_541,
        ce => ap_const_logic_1,
        dout => grp_fu_473_p2);

    FFT_fmul_32ns_32nkbM_U23 : component FFT_fmul_32ns_32nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => p_1_93_reg_388,
        din1 => grp_fu_477_p1,
        dout => grp_fu_477_p2);

    FFT_fmul_32ns_32nkbM_U24 : component FFT_fmul_32ns_32nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => p_s_reg_376,
        din1 => grp_fu_482_p1,
        dout => grp_fu_482_p2);

    FFT_fmul_32ns_32nkbM_U25 : component FFT_fmul_32ns_32nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => p_1_93_reg_388,
        din1 => grp_fu_487_p1,
        dout => grp_fu_487_p2);

    FFT_fmul_32ns_32nkbM_U26 : component FFT_fmul_32ns_32nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_492_p0,
        din1 => p_s_reg_376,
        dout => grp_fu_492_p2);

    FFT_fdiv_32ns_32nlbW_U27 : component FFT_fdiv_32ns_32nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv32_40490FDB,
        din1 => tmp_10_reg_952,
        ce => ap_const_logic_1,
        dout => grp_fu_501_p2);

    FFT_fdiv_32ns_32nlbW_U28 : component FFT_fdiv_32ns_32nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv32_C0490FDB,
        din1 => tmp_10_reg_952,
        ce => ap_const_logic_1,
        dout => grp_fu_506_p2);

    FFT_sitofp_32ns_3mb6_U29 : component FFT_sitofp_32ns_3mb6
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_511_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_511_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    array_last_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                array_last_0_sel_rd <= ap_const_logic_0;
            else
                if (((array_last_0_ack_out = ap_const_logic_1) and (array_last_0_vld_out = ap_const_logic_1))) then 
                                        array_last_0_sel_rd <= not(array_last_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    array_last_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                array_last_0_sel_wr <= ap_const_logic_0;
            else
                if (((array_last_0_ack_in = ap_const_logic_1) and (array_last_0_vld_in = ap_const_logic_1))) then 
                                        array_last_0_sel_wr <= not(array_last_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    array_last_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                array_last_0_state <= ap_const_lv2_0;
            else
                if ((((array_last_0_state = ap_const_lv2_2) and (array_last_0_vld_in = ap_const_logic_0)) or ((array_last_0_state = ap_const_lv2_3) and (array_last_0_vld_in = ap_const_logic_0) and (array_last_0_ack_out = ap_const_logic_1)))) then 
                    array_last_0_state <= ap_const_lv2_2;
                elsif ((((array_last_0_state = ap_const_lv2_1) and (array_last_0_ack_out = ap_const_logic_0)) or ((array_last_0_state = ap_const_lv2_3) and (array_last_0_ack_out = ap_const_logic_0) and (array_last_0_vld_in = ap_const_logic_1)))) then 
                    array_last_0_state <= ap_const_lv2_1;
                elsif (((not(((array_last_0_vld_in = ap_const_logic_0) and (array_last_0_ack_out = ap_const_logic_1))) and not(((array_last_0_ack_out = ap_const_logic_0) and (array_last_0_vld_in = ap_const_logic_1))) and (array_last_0_state = ap_const_lv2_3)) or ((array_last_0_state = ap_const_lv2_1) and (array_last_0_ack_out = ap_const_logic_1)) or ((array_last_0_state = ap_const_lv2_2) and (array_last_0_vld_in = ap_const_logic_1)))) then 
                    array_last_0_state <= ap_const_lv2_3;
                else 
                    array_last_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    array_r_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                array_r_0_sel_rd <= ap_const_logic_0;
            else
                if (((array_r_0_ack_out = ap_const_logic_1) and (array_r_0_vld_out = ap_const_logic_1))) then 
                                        array_r_0_sel_rd <= not(array_r_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    array_r_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                array_r_0_sel_wr <= ap_const_logic_0;
            else
                if (((array_r_0_ack_in = ap_const_logic_1) and (array_r_0_vld_in = ap_const_logic_1))) then 
                                        array_r_0_sel_wr <= not(array_r_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    array_r_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                array_r_0_state <= ap_const_lv2_0;
            else
                if ((((array_r_0_state = ap_const_lv2_2) and (array_r_0_vld_in = ap_const_logic_0)) or ((array_r_0_state = ap_const_lv2_3) and (array_r_0_vld_in = ap_const_logic_0) and (array_r_0_ack_out = ap_const_logic_1)))) then 
                    array_r_0_state <= ap_const_lv2_2;
                elsif ((((array_r_0_state = ap_const_lv2_1) and (array_r_0_ack_out = ap_const_logic_0)) or ((array_r_0_state = ap_const_lv2_3) and (array_r_0_ack_out = ap_const_logic_0) and (array_r_0_vld_in = ap_const_logic_1)))) then 
                    array_r_0_state <= ap_const_lv2_1;
                elsif (((not(((array_r_0_ack_out = ap_const_logic_0) and (array_r_0_vld_in = ap_const_logic_1))) and not(((array_r_0_vld_in = ap_const_logic_0) and (array_r_0_ack_out = ap_const_logic_1))) and (array_r_0_state = ap_const_lv2_3)) or ((array_r_0_state = ap_const_lv2_1) and (array_r_0_ack_out = ap_const_logic_1)) or ((array_r_0_state = ap_const_lv2_2) and (array_r_0_vld_in = ap_const_logic_1)))) then 
                    array_r_0_state <= ap_const_lv2_3;
                else 
                    array_r_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_float_s_fu_431_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sin_or_cos_float_s_fu_431_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    grp_sin_or_cos_float_s_fu_431_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_float_s_fu_431_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_float_s_fu_431_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_float_s_fu_446_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sin_or_cos_float_s_fu_446_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    grp_sin_or_cos_float_s_fu_446_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_float_s_fu_446_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_float_s_fu_446_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    oparray_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                oparray_1_sel_rd <= ap_const_logic_0;
            else
                if (((oparray_1_ack_out = ap_const_logic_1) and (oparray_1_vld_out = ap_const_logic_1))) then 
                                        oparray_1_sel_rd <= not(oparray_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    oparray_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                oparray_1_sel_wr <= ap_const_logic_0;
            else
                if (((oparray_1_ack_in = ap_const_logic_1) and (oparray_1_vld_in = ap_const_logic_1))) then 
                                        oparray_1_sel_wr <= not(oparray_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    oparray_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                oparray_1_state <= ap_const_lv2_0;
            else
                if ((((oparray_1_state = ap_const_lv2_2) and (oparray_1_vld_in = ap_const_logic_0)) or ((oparray_1_state = ap_const_lv2_3) and (oparray_1_vld_in = ap_const_logic_0) and (oparray_1_ack_out = ap_const_logic_1)))) then 
                    oparray_1_state <= ap_const_lv2_2;
                elsif ((((oparray_1_state = ap_const_lv2_1) and (oparray_1_ack_out = ap_const_logic_0)) or ((oparray_1_state = ap_const_lv2_3) and (oparray_1_ack_out = ap_const_logic_0) and (oparray_1_vld_in = ap_const_logic_1)))) then 
                    oparray_1_state <= ap_const_lv2_1;
                elsif (((not(((oparray_1_vld_in = ap_const_logic_0) and (oparray_1_ack_out = ap_const_logic_1))) and not(((oparray_1_ack_out = ap_const_logic_0) and (oparray_1_vld_in = ap_const_logic_1))) and (oparray_1_state = ap_const_lv2_3)) or ((oparray_1_state = ap_const_lv2_1) and (oparray_1_ack_out = ap_const_logic_1)) or ((oparray_1_state = ap_const_lv2_2) and (oparray_1_vld_in = ap_const_logic_1)))) then 
                    oparray_1_state <= ap_const_lv2_3;
                else 
                    oparray_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    oparray_last_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                oparray_last_1_sel_rd <= ap_const_logic_0;
            else
                if (((oparray_last_1_ack_out = ap_const_logic_1) and (oparray_last_1_vld_out = ap_const_logic_1))) then 
                                        oparray_last_1_sel_rd <= not(oparray_last_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    oparray_last_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                oparray_last_1_sel_wr <= ap_const_logic_0;
            else
                if (((oparray_last_1_ack_in = ap_const_logic_1) and (oparray_last_1_vld_in = ap_const_logic_1))) then 
                                        oparray_last_1_sel_wr <= not(oparray_last_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    oparray_last_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                oparray_last_1_state <= ap_const_lv2_0;
            else
                if ((((oparray_last_1_state = ap_const_lv2_2) and (oparray_last_1_vld_in = ap_const_logic_0)) or ((oparray_last_1_state = ap_const_lv2_3) and (oparray_last_1_vld_in = ap_const_logic_0) and (oparray_last_1_ack_out = ap_const_logic_1)))) then 
                    oparray_last_1_state <= ap_const_lv2_2;
                elsif ((((oparray_last_1_state = ap_const_lv2_1) and (oparray_last_1_ack_out = ap_const_logic_0)) or ((oparray_last_1_state = ap_const_lv2_3) and (oparray_last_1_ack_out = ap_const_logic_0) and (oparray_last_1_vld_in = ap_const_logic_1)))) then 
                    oparray_last_1_state <= ap_const_lv2_1;
                elsif (((not(((oparray_last_1_vld_in = ap_const_logic_0) and (oparray_last_1_ack_out = ap_const_logic_1))) and not(((oparray_last_1_ack_out = ap_const_logic_0) and (oparray_last_1_vld_in = ap_const_logic_1))) and (oparray_last_1_state = ap_const_lv2_3)) or ((oparray_last_1_state = ap_const_lv2_1) and (oparray_last_1_ack_out = ap_const_logic_1)) or ((oparray_last_1_state = ap_const_lv2_2) and (oparray_last_1_vld_in = ap_const_logic_1)))) then 
                    oparray_last_1_state <= ap_const_lv2_3;
                else 
                    oparray_last_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    a1_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_558_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                a1_reg_309 <= a_cast5_cast_fu_554_p1;
            elsif (((exitcond5_fu_570_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                a1_reg_309 <= tmp_6_fu_602_p1;
            end if; 
        end if;
    end process;

    a_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_548_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                a_reg_287 <= ap_const_lv11_0;
            elsif ((not(((tmp_7_fu_624_p2 = ap_const_lv1_1) and (array_r_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_624_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                a_reg_287 <= i_reg_868;
            end if; 
        end if;
    end process;

    base_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_570_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                base_reg_329 <= ap_const_lv32_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                base_reg_329 <= base_1_fu_689_p2;
            end if; 
        end if;
    end process;

    h_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_717_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                h_reg_420 <= ap_const_lv11_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state35) and (oparray_1_ack_in = ap_const_logic_1))) then 
                h_reg_420 <= h_1_reg_1076;
            end if; 
        end if;
    end process;

    j_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_558_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_reg_298 <= ap_const_lv4_0;
            elsif (((exitcond5_fu_570_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_298 <= j_1_fu_576_p2;
            end if; 
        end if;
    end process;

    k2_reg_411_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_15_fu_761_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                k2_reg_411 <= k_1_cast2_fu_753_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                k2_reg_411 <= k_2_reg_1036;
            end if; 
        end if;
    end process;

    k_0_in_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_570_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                k_0_in_reg_318 <= ap_const_lv4_A;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                k_0_in_reg_318 <= tmp_32_reg_886;
            end if; 
        end if;
    end process;

    k_1_reg_400_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                k_1_reg_400 <= j_2_reg_1003;
            elsif (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                k_1_reg_400 <= ap_const_lv30_0;
            end if; 
        end if;
    end process;

    p_1_93_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                p_1_93_reg_388 <= grp_fu_461_p2;
            elsif (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                p_1_93_reg_388 <= ap_const_lv32_3F800000;
            end if; 
        end if;
    end process;

    p_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_558_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_reg_353 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                p_reg_353 <= p_1_reg_912;
            end if; 
        end if;
    end process;

    p_s_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                p_s_reg_376 <= grp_fu_465_p2;
            elsif (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                p_s_reg_376 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    s_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_695_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                s_reg_364 <= ap_const_lv4_1;
            elsif (((tmp_15_fu_761_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                s_reg_364 <= s_1_fu_772_p2;
            end if; 
        end if;
    end process;

    val_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_570_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                val_reg_341 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                val_reg_341 <= val_1_fu_683_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((array_last_0_load_A = ap_const_logic_1)) then
                array_last_0_payload_A <= array_r_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((array_last_0_load_B = ap_const_logic_1)) then
                array_last_0_payload_B <= array_r_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((array_r_0_load_A = ap_const_logic_1)) then
                array_r_0_payload_A <= array_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((array_r_0_load_B = ap_const_logic_1)) then
                array_r_0_payload_B <= array_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                c_imag_1_reg_1058 <= grp_fu_473_p2;
                c_real_1_reg_1053 <= grp_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((oparray_last_1_ack_in = ap_const_logic_0) or (oparray_1_ack_in = ap_const_logic_0))) and (tmp_s_reg_856 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                h_1_reg_1076 <= h_1_fu_822_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_868 <= i_fu_564_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                j_2_reg_1003 <= j_2_fu_766_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_fu_788_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                k_2_reg_1036 <= k_2_fu_811_p2;
                tmp_imag_addr_2_reg_1021 <= tmp_18_fu_799_p1(10 - 1 downto 0);
                tmp_imag_addr_3_reg_1031 <= tmp_19_fu_805_p1(10 - 1 downto 0);
                tmp_real_addr_2_reg_1016 <= tmp_18_fu_799_p1(10 - 1 downto 0);
                tmp_real_addr_3_reg_1026 <= tmp_19_fu_805_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    m2_reg_978(9 downto 0) <= m2_fu_750_p1(9 downto 0);
                    m_cast_reg_968(10 downto 0) <= m_cast_fu_744_p1(10 downto 0);
                    tmp_8_reg_973(9 downto 0) <= tmp_8_fu_747_p1(9 downto 0);
                wm_imag_reg_989 <= grp_sin_or_cos_float_s_fu_446_ap_return;
                wm_real_reg_983 <= grp_sin_or_cos_float_s_fu_431_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_717_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                m_reg_936 <= m_fu_723_p2;
                tmp_33_reg_941 <= m_fu_723_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((oparray_1_load_A = ap_const_logic_1)) then
                oparray_1_payload_A <= oparray_imag_addr_fu_842_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((oparray_1_load_B = ap_const_logic_1)) then
                oparray_1_payload_B <= oparray_imag_addr_fu_842_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((oparray_last_1_load_A = ap_const_logic_1)) then
                oparray_last_1_payload_A <= array_last_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((oparray_last_1_load_B = ap_const_logic_1)) then
                oparray_last_1_payload_B <= array_last_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                p_1_reg_912 <= p_1_fu_701_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((icmp_fu_788_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)))) then
                reg_514 <= grp_fu_477_p2;
                reg_519 <= grp_fu_482_p2;
                reg_524 <= grp_fu_487_p2;
                reg_529 <= grp_fu_492_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state24))) then
                reg_534 <= grp_fu_461_p2;
                reg_541 <= grp_fu_465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_10_reg_952 <= grp_fu_511_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((tmp_7_fu_624_p2 = ap_const_lv1_1) and (array_r_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_32_reg_886 <= tmp_32_fu_620_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_695_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    tmp_4_reg_917(10 downto 0) <= tmp_4_fu_707_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_s_reg_856 <= tmp_s_fu_548_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                u_imag_reg_1047 <= tmp_imag_q0;
                u_real_reg_1041 <= tmp_real_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                x_assign_1_reg_963 <= grp_fu_506_p2;
                x_assign_reg_958 <= grp_fu_501_p2;
            end if;
        end if;
    end process;
    tmp_4_reg_917(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    m_cast_reg_968(31 downto 11) <= "000000000000000000000";
    tmp_8_reg_973(30 downto 10) <= "000000000000000000000";
    m2_reg_978(31 downto 10) <= "0000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, array_r_0_vld_out, oparray_1_ack_in, oparray_1_state, oparray_last_1_ack_in, oparray_last_1_state, ap_CS_fsm_state4, tmp_7_fu_624_p2, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state20, icmp_fu_788_p2, tmp_s_fu_548_p2, tmp_s_reg_856, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond5_fu_570_p2, ap_CS_fsm_state6, exitcond2_fu_695_p2, ap_CS_fsm_state8, exitcond4_fu_717_p2, ap_CS_fsm_state18, ap_block_state18_on_subcall_done, ap_CS_fsm_state19, tmp_15_fu_761_p2, ap_CS_fsm_state33, exitcond_fu_816_p2, exitcond3_fu_558_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((tmp_s_fu_548_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((tmp_s_fu_548_p2 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond3_fu_558_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond5_fu_570_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((tmp_7_fu_624_p2 = ap_const_lv1_1) and (array_r_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_624_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((tmp_7_fu_624_p2 = ap_const_lv1_1) and (array_r_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_624_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((exitcond2_fu_695_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((exitcond4_fu_717_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                if (((tmp_15_fu_761_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                if (((icmp_fu_788_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state33 => 
                if ((not(((oparray_last_1_ack_in = ap_const_logic_0) or (oparray_1_ack_in = ap_const_logic_0))) and (oparray_last_1_state(0) = ap_const_logic_0) and (oparray_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state33) and ((exitcond_fu_816_p2 = ap_const_lv1_1) or (tmp_s_reg_856 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((oparray_last_1_ack_in = ap_const_logic_0) or (oparray_1_ack_in = ap_const_logic_0))) and (tmp_s_reg_856 = ap_const_lv1_1) and (exitcond_fu_816_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                if ((not(((array_r_0_vld_out = ap_const_logic_0) or (oparray_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state35) and (oparray_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_cast5_cast_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_reg_287),30));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state18_on_subcall_done_assign_proc : process(grp_sin_or_cos_float_s_fu_431_ap_done, grp_sin_or_cos_float_s_fu_446_ap_done)
    begin
                ap_block_state18_on_subcall_done <= ((grp_sin_or_cos_float_s_fu_446_ap_done = ap_const_logic_0) or (grp_sin_or_cos_float_s_fu_431_ap_done = ap_const_logic_0));
    end process;


    ap_block_state33_assign_proc : process(oparray_1_ack_in, oparray_last_1_ack_in)
    begin
                ap_block_state33 <= ((oparray_last_1_ack_in = ap_const_logic_0) or (oparray_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(array_r_0_vld_out, tmp_7_fu_624_p2)
    begin
                ap_block_state4 <= ((tmp_7_fu_624_p2 = ap_const_lv1_1) and (array_r_0_vld_out = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(oparray_1_ack_in, oparray_1_state, oparray_last_1_ack_in, oparray_last_1_state, tmp_s_reg_856, ap_CS_fsm_state33, exitcond_fu_816_p2)
    begin
        if ((not(((oparray_last_1_ack_in = ap_const_logic_0) or (oparray_1_ack_in = ap_const_logic_0))) and (oparray_last_1_state(0) = ap_const_logic_0) and (oparray_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state33) and ((exitcond_fu_816_p2 = ap_const_lv1_1) or (tmp_s_reg_856 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(oparray_1_ack_in, oparray_1_state, oparray_last_1_ack_in, oparray_last_1_state, tmp_s_reg_856, ap_CS_fsm_state33, exitcond_fu_816_p2)
    begin
        if ((not(((oparray_last_1_ack_in = ap_const_logic_0) or (oparray_1_ack_in = ap_const_logic_0))) and (oparray_last_1_state(0) = ap_const_logic_0) and (oparray_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state33) and ((exitcond_fu_816_p2 = ap_const_lv1_1) or (tmp_s_reg_856 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    array_imag_load_new9_fu_654_p4 <= array_r_0_data_out(63 downto 32);
    array_last_0_ack_in <= array_last_0_state(1);

    array_last_0_ack_out_assign_proc : process(array_r_0_vld_out, oparray_1_ack_in, ap_CS_fsm_state4, tmp_7_fu_624_p2, ap_CS_fsm_state34)
    begin
        if (((not(((array_r_0_vld_out = ap_const_logic_0) or (oparray_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state34)) or (not(((tmp_7_fu_624_p2 = ap_const_lv1_1) and (array_r_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_624_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            array_last_0_ack_out <= ap_const_logic_1;
        else 
            array_last_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    array_last_0_data_out_assign_proc : process(array_last_0_payload_A, array_last_0_payload_B, array_last_0_sel)
    begin
        if ((array_last_0_sel = ap_const_logic_1)) then 
            array_last_0_data_out <= array_last_0_payload_B;
        else 
            array_last_0_data_out <= array_last_0_payload_A;
        end if; 
    end process;

    array_last_0_load_A <= (not(array_last_0_sel_wr) and array_last_0_state_cmp_full);
    array_last_0_load_B <= (array_last_0_state_cmp_full and array_last_0_sel_wr);
    array_last_0_sel <= array_last_0_sel_rd;
    array_last_0_state_cmp_full <= '0' when (array_last_0_state = ap_const_lv2_1) else '1';
    array_last_0_vld_in <= array_r_TVALID;
    array_last_0_vld_out <= array_last_0_state(0);
    array_r_0_ack_in <= array_r_0_state(1);

    array_r_0_ack_out_assign_proc : process(array_r_0_vld_out, oparray_1_ack_in, ap_CS_fsm_state4, tmp_7_fu_624_p2, ap_CS_fsm_state34)
    begin
        if (((not(((array_r_0_vld_out = ap_const_logic_0) or (oparray_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state34)) or (not(((tmp_7_fu_624_p2 = ap_const_lv1_1) and (array_r_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_624_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            array_r_0_ack_out <= ap_const_logic_1;
        else 
            array_r_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    array_r_0_data_out_assign_proc : process(array_r_0_payload_A, array_r_0_payload_B, array_r_0_sel)
    begin
        if ((array_r_0_sel = ap_const_logic_1)) then 
            array_r_0_data_out <= array_r_0_payload_B;
        else 
            array_r_0_data_out <= array_r_0_payload_A;
        end if; 
    end process;

    array_r_0_load_A <= (not(array_r_0_sel_wr) and array_r_0_state_cmp_full);
    array_r_0_load_B <= (array_r_0_state_cmp_full and array_r_0_sel_wr);
    array_r_0_sel <= array_r_0_sel_rd;
    array_r_0_state_cmp_full <= '0' when (array_r_0_state = ap_const_lv2_1) else '1';
    array_r_0_vld_in <= array_r_TVALID;
    array_r_0_vld_out <= array_r_0_state(0);

    array_r_TDATA_blk_n_assign_proc : process(array_r_0_state, ap_CS_fsm_state4, tmp_7_fu_624_p2, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or ((tmp_7_fu_624_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            array_r_TDATA_blk_n <= array_r_0_state(0);
        else 
            array_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    array_r_TREADY <= array_last_0_state(1);
    base_1_fu_689_p2 <= std_logic_vector(shift_left(unsigned(base_reg_329),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));

    bin_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, tmp_5_fu_582_p1, tmp_12_fu_630_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bin_address0 <= tmp_12_fu_630_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bin_address0 <= tmp_5_fu_582_p1(4 - 1 downto 0);
        else 
            bin_address0 <= "XXXX";
        end if; 
    end process;


    bin_ce0_assign_proc : process(array_r_0_vld_out, ap_CS_fsm_state4, tmp_7_fu_624_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (not(((tmp_7_fu_624_p2 = ap_const_lv1_1) and (array_r_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            bin_ce0 <= ap_const_logic_1;
        else 
            bin_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bin_d0 <= a1_reg_309(1 - 1 downto 0);

    bin_we0_assign_proc : process(ap_CS_fsm_state3, exitcond5_fu_570_p2)
    begin
        if (((exitcond5_fu_570_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            bin_we0 <= ap_const_logic_1;
        else 
            bin_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_695_p2 <= "1" when (p_reg_353 = ap_const_lv11_400) else "0";
    exitcond3_fu_558_p2 <= "1" when (a_reg_287 = ap_const_lv11_400) else "0";
    exitcond4_fu_717_p2 <= "1" when (s_reg_364 = ap_const_lv4_B) else "0";
    exitcond5_fu_570_p2 <= "1" when (j_reg_298 = ap_const_lv4_A) else "0";
    exitcond_fu_816_p2 <= "1" when (h_reg_420 = ap_const_lv11_400) else "0";

    grp_fu_461_opcode_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state25, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_461_opcode <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_461_opcode <= ap_const_lv2_0;
        else 
            grp_fu_461_opcode <= "XX";
        end if; 
    end process;


    grp_fu_461_p0_assign_proc : process(reg_514, u_real_reg_1041, ap_CS_fsm_state22, ap_CS_fsm_state25, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_461_p0 <= u_real_reg_1041;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_461_p0 <= reg_514;
        else 
            grp_fu_461_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_461_p1_assign_proc : process(reg_519, reg_534, ap_CS_fsm_state22, ap_CS_fsm_state25, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_461_p1 <= reg_534;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_461_p1 <= reg_519;
        else 
            grp_fu_461_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_465_p0_assign_proc : process(reg_524, u_imag_reg_1047, ap_CS_fsm_state22, ap_CS_fsm_state25, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_465_p0 <= u_imag_reg_1047;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_465_p0 <= reg_524;
        else 
            grp_fu_465_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_465_p1_assign_proc : process(reg_529, reg_541, ap_CS_fsm_state22, ap_CS_fsm_state25, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_465_p1 <= reg_541;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            grp_fu_465_p1 <= reg_529;
        else 
            grp_fu_465_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_477_p1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, wm_real_reg_983, tmp_real_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_477_p1 <= tmp_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_477_p1 <= wm_real_reg_983;
        else 
            grp_fu_477_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_482_p1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, wm_imag_reg_989, tmp_imag_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_482_p1 <= tmp_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_482_p1 <= wm_imag_reg_989;
        else 
            grp_fu_482_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_487_p1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, wm_imag_reg_989, tmp_imag_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_487_p1 <= tmp_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_487_p1 <= wm_imag_reg_989;
        else 
            grp_fu_487_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_492_p0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, wm_real_reg_983, tmp_real_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_492_p0 <= tmp_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_492_p0 <= wm_real_reg_983;
        else 
            grp_fu_492_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_511_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_729_p4),32));
    grp_sin_or_cos_float_s_fu_431_ap_start <= grp_sin_or_cos_float_s_fu_431_ap_start_reg;
    grp_sin_or_cos_float_s_fu_431_do_cos <= ap_const_logic_1;
    grp_sin_or_cos_float_s_fu_446_ap_start <= grp_sin_or_cos_float_s_fu_446_ap_start_reg;
    grp_sin_or_cos_float_s_fu_446_do_cos <= ap_const_logic_0;
    h_1_fu_822_p2 <= std_logic_vector(unsigned(h_reg_420) + unsigned(ap_const_lv11_1));
    i_fu_564_p2 <= std_logic_vector(unsigned(a_reg_287) + unsigned(ap_const_lv11_1));
    icmp_fu_788_p2 <= "1" when (signed(tmp_36_fu_778_p4) < signed(ap_const_lv22_1)) else "0";
    j_1_fu_576_p2 <= std_logic_vector(unsigned(j_reg_298) + unsigned(ap_const_lv4_1));
    j_2_fu_766_p2 <= std_logic_vector(unsigned(k_1_reg_400) + unsigned(ap_const_lv30_1));
    k_0_in_cast_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_in_reg_318),5));
    k_1_cast2_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_reg_400),32));
    k_1_cast_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_1_reg_400),31));
    k_2_fu_811_p2 <= std_logic_vector(unsigned(m_cast_reg_968) + unsigned(k2_reg_411));
        k_cast8_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(k_fu_610_p2),32));

    k_fu_610_p2 <= std_logic_vector(signed(ap_const_lv5_1F) + signed(k_0_in_cast_fu_606_p1));
    m2_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_reg_941),32));
    m_cast_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_reg_936),32));
    m_fu_723_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv11_1),to_integer(unsigned('0' & s_cast_fu_713_p1(11-1 downto 0)))));
    oparray_1_ack_in <= oparray_1_state(1);
    oparray_1_ack_out <= oparray_TREADY;

    oparray_1_data_out_assign_proc : process(oparray_1_payload_A, oparray_1_payload_B, oparray_1_sel)
    begin
        if ((oparray_1_sel = ap_const_logic_1)) then 
            oparray_1_data_out <= oparray_1_payload_B;
        else 
            oparray_1_data_out <= oparray_1_payload_A;
        end if; 
    end process;

    oparray_1_load_A <= (oparray_1_state_cmp_full and not(oparray_1_sel_wr));
    oparray_1_load_B <= (oparray_1_state_cmp_full and oparray_1_sel_wr);
    oparray_1_sel <= oparray_1_sel_rd;
    oparray_1_state_cmp_full <= '0' when (oparray_1_state = ap_const_lv2_1) else '1';

    oparray_1_vld_in_assign_proc : process(array_r_0_vld_out, oparray_1_ack_in, ap_CS_fsm_state34)
    begin
        if ((not(((array_r_0_vld_out = ap_const_logic_0) or (oparray_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            oparray_1_vld_in <= ap_const_logic_1;
        else 
            oparray_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    oparray_1_vld_out <= oparray_1_state(0);
    oparray_TDATA <= oparray_1_data_out;

    oparray_TDATA_blk_n_assign_proc : process(oparray_1_state, ap_CS_fsm_state34, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            oparray_TDATA_blk_n <= oparray_1_state(1);
        else 
            oparray_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    oparray_TLAST <= oparray_last_1_data_out;
    oparray_TVALID <= oparray_last_1_state(0);
    oparray_imag_addr_fu_842_p3 <= (tmp_imag_load_toint_fu_838_p1 & tmp_real_load_toint_fu_834_p1);
    oparray_last_1_ack_in <= oparray_last_1_state(1);
    oparray_last_1_ack_out <= oparray_TREADY;

    oparray_last_1_data_out_assign_proc : process(oparray_last_1_payload_A, oparray_last_1_payload_B, oparray_last_1_sel)
    begin
        if ((oparray_last_1_sel = ap_const_logic_1)) then 
            oparray_last_1_data_out <= oparray_last_1_payload_B;
        else 
            oparray_last_1_data_out <= oparray_last_1_payload_A;
        end if; 
    end process;

    oparray_last_1_load_A <= (oparray_last_1_state_cmp_full and not(oparray_last_1_sel_wr));
    oparray_last_1_load_B <= (oparray_last_1_state_cmp_full and oparray_last_1_sel_wr);
    oparray_last_1_sel <= oparray_last_1_sel_rd;
    oparray_last_1_state_cmp_full <= '0' when (oparray_last_1_state = ap_const_lv2_1) else '1';

    oparray_last_1_vld_in_assign_proc : process(array_r_0_vld_out, oparray_1_ack_in, ap_CS_fsm_state34)
    begin
        if ((not(((array_r_0_vld_out = ap_const_logic_0) or (oparray_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            oparray_last_1_vld_in <= ap_const_logic_1;
        else 
            oparray_last_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    oparray_last_1_vld_out <= oparray_last_1_state(0);
    p_1_fu_701_p2 <= std_logic_vector(unsigned(p_reg_353) + unsigned(ap_const_lv11_1));
    s_1_fu_772_p2 <= std_logic_vector(unsigned(s_reg_364) + unsigned(ap_const_lv4_1));
    s_cast_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s_reg_364),11));
        tmp_11_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(val_reg_341),64));

    tmp_12_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_cast8_fu_616_p1),64));
    tmp_13_fu_669_p3 <= 
        ap_const_lv32_FFFFFFFF when (bin_q0(0) = '1') else 
        ap_const_lv32_0;
    tmp_14_fu_677_p2 <= (tmp_13_fu_669_p3 and base_reg_329);
    tmp_15_fu_761_p2 <= "1" when (unsigned(k_1_cast_fu_757_p1) < unsigned(tmp_8_reg_973)) else "0";
    tmp_16_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_420),64));
    tmp_17_fu_794_p2 <= std_logic_vector(signed(k2_reg_411) + signed(m2_reg_978));
        tmp_18_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_fu_794_p2),64));

        tmp_19_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(k2_reg_411),64));

    tmp_31_fu_592_p4 <= a1_reg_309(29 downto 1);
    tmp_32_fu_620_p1 <= k_fu_610_p2(4 - 1 downto 0);
    tmp_33_fu_729_p4 <= m_fu_723_p2(10 downto 1);
    tmp_34_fu_639_p1 <= array_r_0_data_out(32 - 1 downto 0);
    tmp_36_fu_778_p4 <= k2_reg_411(31 downto 10);
    tmp_4_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_reg_353),64));
    tmp_5_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_298),64));
        tmp_6_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_31_fu_592_p4),30));

    tmp_7_fu_624_p2 <= "1" when (k_0_in_reg_318 = ap_const_lv4_0) else "0";
    tmp_8_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_reg_941),31));

    tmp_imag_address0_assign_proc : process(ap_CS_fsm_state20, tmp_4_reg_917, tmp_imag_addr_2_reg_1021, tmp_imag_addr_3_reg_1031, ap_CS_fsm_state33, ap_CS_fsm_state7, ap_CS_fsm_state29, tmp_18_fu_799_p1, tmp_16_fu_828_p1, ap_CS_fsm_state23, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            tmp_imag_address0 <= tmp_16_fu_828_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            tmp_imag_address0 <= tmp_imag_addr_2_reg_1021;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            tmp_imag_address0 <= tmp_imag_addr_3_reg_1031;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            tmp_imag_address0 <= tmp_18_fu_799_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            tmp_imag_address0 <= tmp_4_reg_917(10 - 1 downto 0);
        else 
            tmp_imag_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    tmp_imag_ce0_assign_proc : process(oparray_1_ack_in, oparray_last_1_ack_in, ap_CS_fsm_state20, ap_CS_fsm_state33, ap_CS_fsm_state7, ap_CS_fsm_state29, ap_CS_fsm_state23, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state20) or (not(((oparray_last_1_ack_in = ap_const_logic_0) or (oparray_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state33)))) then 
            tmp_imag_ce0 <= ap_const_logic_1;
        else 
            tmp_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_imag_d0_assign_proc : process(reg_541, c_imag_1_reg_1058, tmparr_imag_q0, ap_CS_fsm_state7, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            tmp_imag_d0 <= c_imag_1_reg_1058;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            tmp_imag_d0 <= reg_541;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            tmp_imag_d0 <= tmparr_imag_q0;
        else 
            tmp_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    tmp_imag_load_toint_fu_838_p1 <= tmp_imag_q0;

    tmp_imag_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            tmp_imag_we0 <= ap_const_logic_1;
        else 
            tmp_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_real_address0_assign_proc : process(ap_CS_fsm_state20, tmp_4_reg_917, tmp_real_addr_2_reg_1016, tmp_real_addr_3_reg_1026, ap_CS_fsm_state33, ap_CS_fsm_state7, ap_CS_fsm_state29, tmp_18_fu_799_p1, tmp_16_fu_828_p1, ap_CS_fsm_state23, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            tmp_real_address0 <= tmp_16_fu_828_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            tmp_real_address0 <= tmp_real_addr_2_reg_1016;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            tmp_real_address0 <= tmp_real_addr_3_reg_1026;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            tmp_real_address0 <= tmp_18_fu_799_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            tmp_real_address0 <= tmp_4_reg_917(10 - 1 downto 0);
        else 
            tmp_real_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    tmp_real_ce0_assign_proc : process(oparray_1_ack_in, oparray_last_1_ack_in, ap_CS_fsm_state20, ap_CS_fsm_state33, ap_CS_fsm_state7, ap_CS_fsm_state29, ap_CS_fsm_state23, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state20) or (not(((oparray_last_1_ack_in = ap_const_logic_0) or (oparray_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state33)))) then 
            tmp_real_ce0 <= ap_const_logic_1;
        else 
            tmp_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    tmp_real_d0_assign_proc : process(reg_534, c_real_1_reg_1053, tmparr_real_q0, ap_CS_fsm_state7, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            tmp_real_d0 <= c_real_1_reg_1053;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            tmp_real_d0 <= reg_534;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            tmp_real_d0 <= tmparr_real_q0;
        else 
            tmp_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    tmp_real_load_toint_fu_834_p1 <= tmp_real_q0;

    tmp_real_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            tmp_real_we0 <= ap_const_logic_1;
        else 
            tmp_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_s_fu_548_p2 <= "1" when (signed(control) > signed(ap_const_lv32_0)) else "0";

    tmparr_imag_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, tmp_4_fu_707_p1, tmp_11_fu_648_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tmparr_imag_address0 <= tmp_4_fu_707_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmparr_imag_address0 <= tmp_11_fu_648_p1(10 - 1 downto 0);
        else 
            tmparr_imag_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    tmparr_imag_ce0_assign_proc : process(array_r_0_vld_out, ap_CS_fsm_state4, tmp_7_fu_624_p2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (not(((tmp_7_fu_624_p2 = ap_const_lv1_1) and (array_r_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            tmparr_imag_ce0 <= ap_const_logic_1;
        else 
            tmparr_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmparr_imag_d0 <= array_imag_load_new9_fu_654_p4;

    tmparr_imag_we0_assign_proc : process(array_r_0_vld_out, ap_CS_fsm_state4, tmp_7_fu_624_p2)
    begin
        if ((not(((tmp_7_fu_624_p2 = ap_const_lv1_1) and (array_r_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_624_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            tmparr_imag_we0 <= ap_const_logic_1;
        else 
            tmparr_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    tmparr_real_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, tmp_4_fu_707_p1, tmp_11_fu_648_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            tmparr_real_address0 <= tmp_4_fu_707_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            tmparr_real_address0 <= tmp_11_fu_648_p1(10 - 1 downto 0);
        else 
            tmparr_real_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    tmparr_real_ce0_assign_proc : process(array_r_0_vld_out, ap_CS_fsm_state4, tmp_7_fu_624_p2, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (not(((tmp_7_fu_624_p2 = ap_const_lv1_1) and (array_r_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            tmparr_real_ce0 <= ap_const_logic_1;
        else 
            tmparr_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmparr_real_d0 <= tmp_34_fu_639_p1;

    tmparr_real_we0_assign_proc : process(array_r_0_vld_out, ap_CS_fsm_state4, tmp_7_fu_624_p2)
    begin
        if ((not(((tmp_7_fu_624_p2 = ap_const_lv1_1) and (array_r_0_vld_out = ap_const_logic_0))) and (tmp_7_fu_624_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            tmparr_real_we0 <= ap_const_logic_1;
        else 
            tmparr_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    val_1_fu_683_p2 <= std_logic_vector(signed(val_reg_341) + signed(tmp_14_fu_677_p2));
end behav;
